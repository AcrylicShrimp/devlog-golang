// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/post"
	"devlog/ent/postimage"
	"devlog/ent/predicate"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PostImageUpdate is the builder for updating PostImage entities.
type PostImageUpdate struct {
	config
	hooks    []Hook
	mutation *PostImageMutation
}

// Where adds a new predicate for the PostImageUpdate builder.
func (piu *PostImageUpdate) Where(ps ...predicate.PostImage) *PostImageUpdate {
	piu.mutation.predicates = append(piu.mutation.predicates, ps...)
	return piu
}

// SetUUID sets the "uuid" field.
func (piu *PostImageUpdate) SetUUID(s string) *PostImageUpdate {
	piu.mutation.SetUUID(s)
	return piu
}

// SetIndex sets the "index" field.
func (piu *PostImageUpdate) SetIndex(u uint64) *PostImageUpdate {
	piu.mutation.ResetIndex()
	piu.mutation.SetIndex(u)
	return piu
}

// AddIndex adds u to the "index" field.
func (piu *PostImageUpdate) AddIndex(u uint64) *PostImageUpdate {
	piu.mutation.AddIndex(u)
	return piu
}

// SetWidth sets the "width" field.
func (piu *PostImageUpdate) SetWidth(u uint32) *PostImageUpdate {
	piu.mutation.ResetWidth()
	piu.mutation.SetWidth(u)
	return piu
}

// AddWidth adds u to the "width" field.
func (piu *PostImageUpdate) AddWidth(u uint32) *PostImageUpdate {
	piu.mutation.AddWidth(u)
	return piu
}

// SetHeight sets the "height" field.
func (piu *PostImageUpdate) SetHeight(u uint32) *PostImageUpdate {
	piu.mutation.ResetHeight()
	piu.mutation.SetHeight(u)
	return piu
}

// AddHeight adds u to the "height" field.
func (piu *PostImageUpdate) AddHeight(u uint32) *PostImageUpdate {
	piu.mutation.AddHeight(u)
	return piu
}

// SetHash sets the "hash" field.
func (piu *PostImageUpdate) SetHash(s string) *PostImageUpdate {
	piu.mutation.SetHash(s)
	return piu
}

// SetURL sets the "url" field.
func (piu *PostImageUpdate) SetURL(s string) *PostImageUpdate {
	piu.mutation.SetURL(s)
	return piu
}

// SetCreatedAt sets the "created_at" field.
func (piu *PostImageUpdate) SetCreatedAt(t time.Time) *PostImageUpdate {
	piu.mutation.SetCreatedAt(t)
	return piu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piu *PostImageUpdate) SetNillableCreatedAt(t *time.Time) *PostImageUpdate {
	if t != nil {
		piu.SetCreatedAt(*t)
	}
	return piu
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (piu *PostImageUpdate) SetPostID(id int) *PostImageUpdate {
	piu.mutation.SetPostID(id)
	return piu
}

// SetPost sets the "post" edge to the Post entity.
func (piu *PostImageUpdate) SetPost(p *Post) *PostImageUpdate {
	return piu.SetPostID(p.ID)
}

// Mutation returns the PostImageMutation object of the builder.
func (piu *PostImageUpdate) Mutation() *PostImageMutation {
	return piu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piu *PostImageUpdate) ClearPost() *PostImageUpdate {
	piu.mutation.ClearPost()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PostImageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(piu.hooks) == 0 {
		if err = piu.check(); err != nil {
			return 0, err
		}
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piu.check(); err != nil {
				return 0, err
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PostImageUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PostImageUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PostImageUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PostImageUpdate) check() error {
	if v, ok := piu.mutation.Hash(); ok {
		if err := postimage.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf("ent: validator failed for field \"hash\": %w", err)}
		}
	}
	if v, ok := piu.mutation.URL(); ok {
		if err := postimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	if _, ok := piu.mutation.PostID(); piu.mutation.PostCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"post\"")
	}
	return nil
}

func (piu *PostImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   postimage.Table,
			Columns: postimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: postimage.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldUUID,
		})
	}
	if value, ok := piu.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: postimage.FieldIndex,
		})
	}
	if value, ok := piu.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: postimage.FieldIndex,
		})
	}
	if value, ok := piu.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldWidth,
		})
	}
	if value, ok := piu.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldWidth,
		})
	}
	if value, ok := piu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldHeight,
		})
	}
	if value, ok := piu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldHeight,
		})
	}
	if value, ok := piu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldHash,
		})
	}
	if value, ok := piu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldURL,
		})
	}
	if value, ok := piu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: postimage.FieldCreatedAt,
		})
	}
	if piu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postimage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PostImageUpdateOne is the builder for updating a single PostImage entity.
type PostImageUpdateOne struct {
	config
	hooks    []Hook
	mutation *PostImageMutation
}

// SetUUID sets the "uuid" field.
func (piuo *PostImageUpdateOne) SetUUID(s string) *PostImageUpdateOne {
	piuo.mutation.SetUUID(s)
	return piuo
}

// SetIndex sets the "index" field.
func (piuo *PostImageUpdateOne) SetIndex(u uint64) *PostImageUpdateOne {
	piuo.mutation.ResetIndex()
	piuo.mutation.SetIndex(u)
	return piuo
}

// AddIndex adds u to the "index" field.
func (piuo *PostImageUpdateOne) AddIndex(u uint64) *PostImageUpdateOne {
	piuo.mutation.AddIndex(u)
	return piuo
}

// SetWidth sets the "width" field.
func (piuo *PostImageUpdateOne) SetWidth(u uint32) *PostImageUpdateOne {
	piuo.mutation.ResetWidth()
	piuo.mutation.SetWidth(u)
	return piuo
}

// AddWidth adds u to the "width" field.
func (piuo *PostImageUpdateOne) AddWidth(u uint32) *PostImageUpdateOne {
	piuo.mutation.AddWidth(u)
	return piuo
}

// SetHeight sets the "height" field.
func (piuo *PostImageUpdateOne) SetHeight(u uint32) *PostImageUpdateOne {
	piuo.mutation.ResetHeight()
	piuo.mutation.SetHeight(u)
	return piuo
}

// AddHeight adds u to the "height" field.
func (piuo *PostImageUpdateOne) AddHeight(u uint32) *PostImageUpdateOne {
	piuo.mutation.AddHeight(u)
	return piuo
}

// SetHash sets the "hash" field.
func (piuo *PostImageUpdateOne) SetHash(s string) *PostImageUpdateOne {
	piuo.mutation.SetHash(s)
	return piuo
}

// SetURL sets the "url" field.
func (piuo *PostImageUpdateOne) SetURL(s string) *PostImageUpdateOne {
	piuo.mutation.SetURL(s)
	return piuo
}

// SetCreatedAt sets the "created_at" field.
func (piuo *PostImageUpdateOne) SetCreatedAt(t time.Time) *PostImageUpdateOne {
	piuo.mutation.SetCreatedAt(t)
	return piuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (piuo *PostImageUpdateOne) SetNillableCreatedAt(t *time.Time) *PostImageUpdateOne {
	if t != nil {
		piuo.SetCreatedAt(*t)
	}
	return piuo
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (piuo *PostImageUpdateOne) SetPostID(id int) *PostImageUpdateOne {
	piuo.mutation.SetPostID(id)
	return piuo
}

// SetPost sets the "post" edge to the Post entity.
func (piuo *PostImageUpdateOne) SetPost(p *Post) *PostImageUpdateOne {
	return piuo.SetPostID(p.ID)
}

// Mutation returns the PostImageMutation object of the builder.
func (piuo *PostImageUpdateOne) Mutation() *PostImageMutation {
	return piuo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piuo *PostImageUpdateOne) ClearPost() *PostImageUpdateOne {
	piuo.mutation.ClearPost()
	return piuo
}

// Save executes the query and returns the updated PostImage entity.
func (piuo *PostImageUpdateOne) Save(ctx context.Context) (*PostImage, error) {
	var (
		err  error
		node *PostImage
	)
	if len(piuo.hooks) == 0 {
		if err = piuo.check(); err != nil {
			return nil, err
		}
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PostImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piuo.check(); err != nil {
				return nil, err
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			mut = piuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PostImageUpdateOne) SaveX(ctx context.Context) *PostImage {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PostImageUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PostImageUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PostImageUpdateOne) check() error {
	if v, ok := piuo.mutation.Hash(); ok {
		if err := postimage.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf("ent: validator failed for field \"hash\": %w", err)}
		}
	}
	if v, ok := piuo.mutation.URL(); ok {
		if err := postimage.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	if _, ok := piuo.mutation.PostID(); piuo.mutation.PostCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"post\"")
	}
	return nil
}

func (piuo *PostImageUpdateOne) sqlSave(ctx context.Context) (_node *PostImage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   postimage.Table,
			Columns: postimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: postimage.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PostImage.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := piuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldUUID,
		})
	}
	if value, ok := piuo.mutation.Index(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: postimage.FieldIndex,
		})
	}
	if value, ok := piuo.mutation.AddedIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: postimage.FieldIndex,
		})
	}
	if value, ok := piuo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldWidth,
		})
	}
	if value, ok := piuo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldWidth,
		})
	}
	if value, ok := piuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldHeight,
		})
	}
	if value, ok := piuo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: postimage.FieldHeight,
		})
	}
	if value, ok := piuo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldHash,
		})
	}
	if value, ok := piuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: postimage.FieldURL,
		})
	}
	if value, ok := piuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: postimage.FieldCreatedAt,
		})
	}
	if piuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postimage.PostTable,
			Columns: []string{postimage.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: post.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PostImage{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postimage.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
