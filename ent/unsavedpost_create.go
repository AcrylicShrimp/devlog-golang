// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"devlog/ent/unsavedpostimage"
	"devlog/ent/unsavedpostthumbnail"
	"devlog/ent/unsavedpostvideo"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnsavedPostCreate is the builder for creating a UnsavedPost entity.
type UnsavedPostCreate struct {
	config
	mutation *UnsavedPostMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (upc *UnsavedPostCreate) SetUUID(s string) *UnsavedPostCreate {
	upc.mutation.SetUUID(s)
	return upc
}

// SetSlug sets the "slug" field.
func (upc *UnsavedPostCreate) SetSlug(s string) *UnsavedPostCreate {
	upc.mutation.SetSlug(s)
	return upc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableSlug(s *string) *UnsavedPostCreate {
	if s != nil {
		upc.SetSlug(*s)
	}
	return upc
}

// SetAccessLevel sets the "access_level" field.
func (upc *UnsavedPostCreate) SetAccessLevel(ul unsavedpost.AccessLevel) *UnsavedPostCreate {
	upc.mutation.SetAccessLevel(ul)
	return upc
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableAccessLevel(ul *unsavedpost.AccessLevel) *UnsavedPostCreate {
	if ul != nil {
		upc.SetAccessLevel(*ul)
	}
	return upc
}

// SetTitle sets the "title" field.
func (upc *UnsavedPostCreate) SetTitle(s string) *UnsavedPostCreate {
	upc.mutation.SetTitle(s)
	return upc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableTitle(s *string) *UnsavedPostCreate {
	if s != nil {
		upc.SetTitle(*s)
	}
	return upc
}

// SetContent sets the "content" field.
func (upc *UnsavedPostCreate) SetContent(s string) *UnsavedPostCreate {
	upc.mutation.SetContent(s)
	return upc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableContent(s *string) *UnsavedPostCreate {
	if s != nil {
		upc.SetContent(*s)
	}
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UnsavedPostCreate) SetCreatedAt(t time.Time) *UnsavedPostCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableCreatedAt(t *time.Time) *UnsavedPostCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetModifiedAt sets the "modified_at" field.
func (upc *UnsavedPostCreate) SetModifiedAt(t time.Time) *UnsavedPostCreate {
	upc.mutation.SetModifiedAt(t)
	return upc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableModifiedAt(t *time.Time) *UnsavedPostCreate {
	if t != nil {
		upc.SetModifiedAt(*t)
	}
	return upc
}

// SetAuthorID sets the "author" edge to the Admin entity by ID.
func (upc *UnsavedPostCreate) SetAuthorID(id int) *UnsavedPostCreate {
	upc.mutation.SetAuthorID(id)
	return upc
}

// SetAuthor sets the "author" edge to the Admin entity.
func (upc *UnsavedPostCreate) SetAuthor(a *Admin) *UnsavedPostCreate {
	return upc.SetAuthorID(a.ID)
}

// SetThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID.
func (upc *UnsavedPostCreate) SetThumbnailID(id int) *UnsavedPostCreate {
	upc.mutation.SetThumbnailID(id)
	return upc
}

// SetNillableThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID if the given value is not nil.
func (upc *UnsavedPostCreate) SetNillableThumbnailID(id *int) *UnsavedPostCreate {
	if id != nil {
		upc = upc.SetThumbnailID(*id)
	}
	return upc
}

// SetThumbnail sets the "thumbnail" edge to the UnsavedPostThumbnail entity.
func (upc *UnsavedPostCreate) SetThumbnail(u *UnsavedPostThumbnail) *UnsavedPostCreate {
	return upc.SetThumbnailID(u.ID)
}

// AddImageIDs adds the "images" edge to the UnsavedPostImage entity by IDs.
func (upc *UnsavedPostCreate) AddImageIDs(ids ...int) *UnsavedPostCreate {
	upc.mutation.AddImageIDs(ids...)
	return upc
}

// AddImages adds the "images" edges to the UnsavedPostImage entity.
func (upc *UnsavedPostCreate) AddImages(u ...*UnsavedPostImage) *UnsavedPostCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upc.AddImageIDs(ids...)
}

// AddVideoIDs adds the "videos" edge to the UnsavedPostVideo entity by IDs.
func (upc *UnsavedPostCreate) AddVideoIDs(ids ...int) *UnsavedPostCreate {
	upc.mutation.AddVideoIDs(ids...)
	return upc
}

// AddVideos adds the "videos" edges to the UnsavedPostVideo entity.
func (upc *UnsavedPostCreate) AddVideos(u ...*UnsavedPostVideo) *UnsavedPostCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upc.AddVideoIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the UnsavedPostAttachment entity by IDs.
func (upc *UnsavedPostCreate) AddAttachmentIDs(ids ...int) *UnsavedPostCreate {
	upc.mutation.AddAttachmentIDs(ids...)
	return upc
}

// AddAttachments adds the "attachments" edges to the UnsavedPostAttachment entity.
func (upc *UnsavedPostCreate) AddAttachments(u ...*UnsavedPostAttachment) *UnsavedPostCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upc.AddAttachmentIDs(ids...)
}

// Mutation returns the UnsavedPostMutation object of the builder.
func (upc *UnsavedPostCreate) Mutation() *UnsavedPostMutation {
	return upc.mutation
}

// Save creates the UnsavedPost in the database.
func (upc *UnsavedPostCreate) Save(ctx context.Context) (*UnsavedPost, error) {
	var (
		err  error
		node *UnsavedPost
	)
	upc.defaults()
	if len(upc.hooks) == 0 {
		if err = upc.check(); err != nil {
			return nil, err
		}
		node, err = upc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsavedPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upc.check(); err != nil {
				return nil, err
			}
			upc.mutation = mutation
			node, err = upc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upc.hooks) - 1; i >= 0; i-- {
			mut = upc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UnsavedPostCreate) SaveX(ctx context.Context) *UnsavedPost {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (upc *UnsavedPostCreate) defaults() {
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := unsavedpost.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.ModifiedAt(); !ok {
		v := unsavedpost.DefaultModifiedAt()
		upc.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UnsavedPostCreate) check() error {
	if _, ok := upc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New("ent: missing required field \"uuid\"")}
	}
	if v, ok := upc.mutation.UUID(); ok {
		if err := unsavedpost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf("ent: validator failed for field \"uuid\": %w", err)}
		}
	}
	if v, ok := upc.mutation.Slug(); ok {
		if err := unsavedpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf("ent: validator failed for field \"slug\": %w", err)}
		}
	}
	if v, ok := upc.mutation.AccessLevel(); ok {
		if err := unsavedpost.AccessLevelValidator(v); err != nil {
			return &ValidationError{Name: "access_level", err: fmt.Errorf("ent: validator failed for field \"access_level\": %w", err)}
		}
	}
	if v, ok := upc.mutation.Title(); ok {
		if err := unsavedpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := upc.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New("ent: missing required field \"modified_at\"")}
	}
	if _, ok := upc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New("ent: missing required edge \"author\"")}
	}
	return nil
}

func (upc *UnsavedPostCreate) sqlSave(ctx context.Context) (*UnsavedPost, error) {
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (upc *UnsavedPostCreate) createSpec() (*UnsavedPost, *sqlgraph.CreateSpec) {
	var (
		_node = &UnsavedPost{config: upc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unsavedpost.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unsavedpost.FieldID,
			},
		}
	)
	if value, ok := upc.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := upc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldSlug,
		})
		_node.Slug = &value
	}
	if value, ok := upc.mutation.AccessLevel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: unsavedpost.FieldAccessLevel,
		})
		_node.AccessLevel = &value
	}
	if value, ok := upc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldTitle,
		})
		_node.Title = &value
	}
	if value, ok := upc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldContent,
		})
		_node.Content = &value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.ModifiedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldModifiedAt,
		})
		_node.ModifiedAt = value
	}
	if nodes := upc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.AuthorTable,
			Columns: []string{unsavedpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_unsaved_posts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unsavedpost.ThumbnailTable,
			Columns: []string{unsavedpost.ThumbnailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostthumbnail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := upc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnsavedPostCreateBulk is the builder for creating many UnsavedPost entities in bulk.
type UnsavedPostCreateBulk struct {
	config
	builders []*UnsavedPostCreate
}

// Save creates the UnsavedPost entities in the database.
func (upcb *UnsavedPostCreateBulk) Save(ctx context.Context) ([]*UnsavedPost, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UnsavedPost, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnsavedPostMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UnsavedPostCreateBulk) SaveX(ctx context.Context) []*UnsavedPost {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
