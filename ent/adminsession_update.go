// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/adminsession"
	"devlog/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminSessionUpdate is the builder for updating AdminSession entities.
type AdminSessionUpdate struct {
	config
	hooks    []Hook
	mutation *AdminSessionMutation
}

// Where appends a list predicates to the AdminSessionUpdate builder.
func (asu *AdminSessionUpdate) Where(ps ...predicate.AdminSession) *AdminSessionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetToken sets the "token" field.
func (asu *AdminSessionUpdate) SetToken(s string) *AdminSessionUpdate {
	asu.mutation.SetToken(s)
	return asu
}

// SetExpiresAt sets the "expires_at" field.
func (asu *AdminSessionUpdate) SetExpiresAt(t time.Time) *AdminSessionUpdate {
	asu.mutation.SetExpiresAt(t)
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AdminSessionUpdate) SetCreatedAt(t time.Time) *AdminSessionUpdate {
	asu.mutation.SetCreatedAt(t)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AdminSessionUpdate) SetNillableCreatedAt(t *time.Time) *AdminSessionUpdate {
	if t != nil {
		asu.SetCreatedAt(*t)
	}
	return asu
}

// SetUserID sets the "user" edge to the Admin entity by ID.
func (asu *AdminSessionUpdate) SetUserID(id int) *AdminSessionUpdate {
	asu.mutation.SetUserID(id)
	return asu
}

// SetUser sets the "user" edge to the Admin entity.
func (asu *AdminSessionUpdate) SetUser(a *Admin) *AdminSessionUpdate {
	return asu.SetUserID(a.ID)
}

// Mutation returns the AdminSessionMutation object of the builder.
func (asu *AdminSessionUpdate) Mutation() *AdminSessionMutation {
	return asu.mutation
}

// ClearUser clears the "user" edge to the Admin entity.
func (asu *AdminSessionUpdate) ClearUser() *AdminSessionUpdate {
	asu.mutation.ClearUser()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AdminSessionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(asu.hooks) == 0 {
		if err = asu.check(); err != nil {
			return 0, err
		}
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asu.check(); err != nil {
				return 0, err
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AdminSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AdminSessionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AdminSessionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AdminSessionUpdate) check() error {
	if v, ok := asu.mutation.Token(); ok {
		if err := adminsession.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	if _, ok := asu.mutation.UserID(); asu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (asu *AdminSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminsession.Table,
			Columns: adminsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminsession.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminsession.FieldToken,
		})
	}
	if value, ok := asu.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminsession.FieldExpiresAt,
		})
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminsession.FieldCreatedAt,
		})
	}
	if asu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminsession.UserTable,
			Columns: []string{adminsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminsession.UserTable,
			Columns: []string{adminsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AdminSessionUpdateOne is the builder for updating a single AdminSession entity.
type AdminSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminSessionMutation
}

// SetToken sets the "token" field.
func (asuo *AdminSessionUpdateOne) SetToken(s string) *AdminSessionUpdateOne {
	asuo.mutation.SetToken(s)
	return asuo
}

// SetExpiresAt sets the "expires_at" field.
func (asuo *AdminSessionUpdateOne) SetExpiresAt(t time.Time) *AdminSessionUpdateOne {
	asuo.mutation.SetExpiresAt(t)
	return asuo
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AdminSessionUpdateOne) SetCreatedAt(t time.Time) *AdminSessionUpdateOne {
	asuo.mutation.SetCreatedAt(t)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AdminSessionUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminSessionUpdateOne {
	if t != nil {
		asuo.SetCreatedAt(*t)
	}
	return asuo
}

// SetUserID sets the "user" edge to the Admin entity by ID.
func (asuo *AdminSessionUpdateOne) SetUserID(id int) *AdminSessionUpdateOne {
	asuo.mutation.SetUserID(id)
	return asuo
}

// SetUser sets the "user" edge to the Admin entity.
func (asuo *AdminSessionUpdateOne) SetUser(a *Admin) *AdminSessionUpdateOne {
	return asuo.SetUserID(a.ID)
}

// Mutation returns the AdminSessionMutation object of the builder.
func (asuo *AdminSessionUpdateOne) Mutation() *AdminSessionMutation {
	return asuo.mutation
}

// ClearUser clears the "user" edge to the Admin entity.
func (asuo *AdminSessionUpdateOne) ClearUser() *AdminSessionUpdateOne {
	asuo.mutation.ClearUser()
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AdminSessionUpdateOne) Select(field string, fields ...string) *AdminSessionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AdminSession entity.
func (asuo *AdminSessionUpdateOne) Save(ctx context.Context) (*AdminSession, error) {
	var (
		err  error
		node *AdminSession
	)
	if len(asuo.hooks) == 0 {
		if err = asuo.check(); err != nil {
			return nil, err
		}
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asuo.check(); err != nil {
				return nil, err
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AdminSessionUpdateOne) SaveX(ctx context.Context) *AdminSession {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AdminSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AdminSessionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AdminSessionUpdateOne) check() error {
	if v, ok := asuo.mutation.Token(); ok {
		if err := adminsession.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	if _, ok := asuo.mutation.UserID(); asuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (asuo *AdminSessionUpdateOne) sqlSave(ctx context.Context) (_node *AdminSession, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminsession.Table,
			Columns: adminsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminsession.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminSession.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminsession.FieldID)
		for _, f := range fields {
			if !adminsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminsession.FieldToken,
		})
	}
	if value, ok := asuo.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminsession.FieldExpiresAt,
		})
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminsession.FieldCreatedAt,
		})
	}
	if asuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminsession.UserTable,
			Columns: []string{adminsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   adminsession.UserTable,
			Columns: []string{adminsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminSession{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
