// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/admin"
	"devlog/ent/adminsession"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AdminSession is the model entity for the AdminSession schema.
type AdminSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// UsedAt holds the value of the "used_at" field.
	UsedAt time.Time `json:"used_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminSessionQuery when eager-loading is set.
	Edges          AdminSessionEdges `json:"edges"`
	admin_sessions *int
}

// AdminSessionEdges holds the relations/edges for other nodes in the graph.
type AdminSessionEdges struct {
	// User holds the value of the user edge.
	User *Admin `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AdminSessionEdges) UserOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminSession) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminsession.FieldID:
			values[i] = new(sql.NullInt64)
		case adminsession.FieldToken:
			values[i] = new(sql.NullString)
		case adminsession.FieldUsedAt, adminsession.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case adminsession.ForeignKeys[0]: // admin_sessions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminSession", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminSession fields.
func (as *AdminSession) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case adminsession.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				as.Token = value.String
			}
		case adminsession.FieldUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field used_at", values[i])
			} else if value.Valid {
				as.UsedAt = value.Time
			}
		case adminsession.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case adminsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field admin_sessions", value)
			} else if value.Valid {
				as.admin_sessions = new(int)
				*as.admin_sessions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AdminSession entity.
func (as *AdminSession) QueryUser() *AdminQuery {
	return (&AdminSessionClient{config: as.config}).QueryUser(as)
}

// Update returns a builder for updating this AdminSession.
// Note that you need to call AdminSession.Unwrap() before calling this method if this AdminSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AdminSession) Update() *AdminSessionUpdateOne {
	return (&AdminSessionClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AdminSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AdminSession) Unwrap() *AdminSession {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminSession is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AdminSession) String() string {
	var builder strings.Builder
	builder.WriteString("AdminSession(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", token=")
	builder.WriteString(as.Token)
	builder.WriteString(", used_at=")
	builder.WriteString(as.UsedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminSessions is a parsable slice of AdminSession.
type AdminSessions []*AdminSession

func (as AdminSessions) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
