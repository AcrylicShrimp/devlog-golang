// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/robotaccess"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RobotAccessCreate is the builder for creating a RobotAccess entity.
type RobotAccessCreate struct {
	config
	mutation *RobotAccessMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (rac *RobotAccessCreate) SetToken(s string) *RobotAccessCreate {
	rac.mutation.SetToken(s)
	return rac
}

// SetMemo sets the "memo" field.
func (rac *RobotAccessCreate) SetMemo(s string) *RobotAccessCreate {
	rac.mutation.SetMemo(s)
	return rac
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (rac *RobotAccessCreate) SetNillableMemo(s *string) *RobotAccessCreate {
	if s != nil {
		rac.SetMemo(*s)
	}
	return rac
}

// SetCreatedAt sets the "created_at" field.
func (rac *RobotAccessCreate) SetCreatedAt(t time.Time) *RobotAccessCreate {
	rac.mutation.SetCreatedAt(t)
	return rac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rac *RobotAccessCreate) SetNillableCreatedAt(t *time.Time) *RobotAccessCreate {
	if t != nil {
		rac.SetCreatedAt(*t)
	}
	return rac
}

// SetExpiresAt sets the "expires_at" field.
func (rac *RobotAccessCreate) SetExpiresAt(t time.Time) *RobotAccessCreate {
	rac.mutation.SetExpiresAt(t)
	return rac
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (rac *RobotAccessCreate) SetNillableExpiresAt(t *time.Time) *RobotAccessCreate {
	if t != nil {
		rac.SetExpiresAt(*t)
	}
	return rac
}

// SetLastAccessAt sets the "last_access_at" field.
func (rac *RobotAccessCreate) SetLastAccessAt(t time.Time) *RobotAccessCreate {
	rac.mutation.SetLastAccessAt(t)
	return rac
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (rac *RobotAccessCreate) SetNillableLastAccessAt(t *time.Time) *RobotAccessCreate {
	if t != nil {
		rac.SetLastAccessAt(*t)
	}
	return rac
}

// SetUserID sets the "user" edge to the Admin entity by ID.
func (rac *RobotAccessCreate) SetUserID(id int) *RobotAccessCreate {
	rac.mutation.SetUserID(id)
	return rac
}

// SetUser sets the "user" edge to the Admin entity.
func (rac *RobotAccessCreate) SetUser(a *Admin) *RobotAccessCreate {
	return rac.SetUserID(a.ID)
}

// Mutation returns the RobotAccessMutation object of the builder.
func (rac *RobotAccessCreate) Mutation() *RobotAccessMutation {
	return rac.mutation
}

// Save creates the RobotAccess in the database.
func (rac *RobotAccessCreate) Save(ctx context.Context) (*RobotAccess, error) {
	var (
		err  error
		node *RobotAccess
	)
	rac.defaults()
	if len(rac.hooks) == 0 {
		if err = rac.check(); err != nil {
			return nil, err
		}
		node, err = rac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rac.check(); err != nil {
				return nil, err
			}
			rac.mutation = mutation
			if node, err = rac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rac.hooks) - 1; i >= 0; i-- {
			if rac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rac *RobotAccessCreate) SaveX(ctx context.Context) *RobotAccess {
	v, err := rac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rac *RobotAccessCreate) Exec(ctx context.Context) error {
	_, err := rac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rac *RobotAccessCreate) ExecX(ctx context.Context) {
	if err := rac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rac *RobotAccessCreate) defaults() {
	if _, ok := rac.mutation.CreatedAt(); !ok {
		v := robotaccess.DefaultCreatedAt()
		rac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rac *RobotAccessCreate) check() error {
	if _, ok := rac.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "token"`)}
	}
	if v, ok := rac.mutation.Token(); ok {
		if err := robotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "token": %w`, err)}
		}
	}
	if v, ok := rac.mutation.Memo(); ok {
		if err := robotaccess.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "memo": %w`, err)}
		}
	}
	if _, ok := rac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := rac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (rac *RobotAccessCreate) sqlSave(ctx context.Context) (*RobotAccess, error) {
	_node, _spec := rac.createSpec()
	if err := sqlgraph.CreateNode(ctx, rac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rac *RobotAccessCreate) createSpec() (*RobotAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &RobotAccess{config: rac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: robotaccess.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: robotaccess.FieldID,
			},
		}
	)
	if value, ok := rac.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := rac.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldMemo,
		})
		_node.Memo = &value
	}
	if value, ok := rac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rac.mutation.ExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldExpiresAt,
		})
		_node.ExpiresAt = &value
	}
	if value, ok := rac.mutation.LastAccessAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldLastAccessAt,
		})
		_node.LastAccessAt = &value
	}
	if nodes := rac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   robotaccess.UserTable,
			Columns: []string{robotaccess.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.admin_robot_accesses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RobotAccessCreateBulk is the builder for creating many RobotAccess entities in bulk.
type RobotAccessCreateBulk struct {
	config
	builders []*RobotAccessCreate
}

// Save creates the RobotAccess entities in the database.
func (racb *RobotAccessCreateBulk) Save(ctx context.Context) ([]*RobotAccess, error) {
	specs := make([]*sqlgraph.CreateSpec, len(racb.builders))
	nodes := make([]*RobotAccess, len(racb.builders))
	mutators := make([]Mutator, len(racb.builders))
	for i := range racb.builders {
		func(i int, root context.Context) {
			builder := racb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RobotAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, racb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, racb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, racb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (racb *RobotAccessCreateBulk) SaveX(ctx context.Context) []*RobotAccess {
	v, err := racb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (racb *RobotAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := racb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (racb *RobotAccessCreateBulk) ExecX(ctx context.Context) {
	if err := racb.Exec(ctx); err != nil {
		panic(err)
	}
}
