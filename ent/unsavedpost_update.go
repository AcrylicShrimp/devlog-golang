// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/category"
	"devlog/ent/predicate"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"devlog/ent/unsavedpostimage"
	"devlog/ent/unsavedpostthumbnail"
	"devlog/ent/unsavedpostvideo"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnsavedPostUpdate is the builder for updating UnsavedPost entities.
type UnsavedPostUpdate struct {
	config
	hooks    []Hook
	mutation *UnsavedPostMutation
}

// Where appends a list predicates to the UnsavedPostUpdate builder.
func (upu *UnsavedPostUpdate) Where(ps ...predicate.UnsavedPost) *UnsavedPostUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUUID sets the "uuid" field.
func (upu *UnsavedPostUpdate) SetUUID(s string) *UnsavedPostUpdate {
	upu.mutation.SetUUID(s)
	return upu
}

// SetSlug sets the "slug" field.
func (upu *UnsavedPostUpdate) SetSlug(s string) *UnsavedPostUpdate {
	upu.mutation.SetSlug(s)
	return upu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableSlug(s *string) *UnsavedPostUpdate {
	if s != nil {
		upu.SetSlug(*s)
	}
	return upu
}

// ClearSlug clears the value of the "slug" field.
func (upu *UnsavedPostUpdate) ClearSlug() *UnsavedPostUpdate {
	upu.mutation.ClearSlug()
	return upu
}

// SetAccessLevel sets the "access_level" field.
func (upu *UnsavedPostUpdate) SetAccessLevel(ul unsavedpost.AccessLevel) *UnsavedPostUpdate {
	upu.mutation.SetAccessLevel(ul)
	return upu
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableAccessLevel(ul *unsavedpost.AccessLevel) *UnsavedPostUpdate {
	if ul != nil {
		upu.SetAccessLevel(*ul)
	}
	return upu
}

// ClearAccessLevel clears the value of the "access_level" field.
func (upu *UnsavedPostUpdate) ClearAccessLevel() *UnsavedPostUpdate {
	upu.mutation.ClearAccessLevel()
	return upu
}

// SetTitle sets the "title" field.
func (upu *UnsavedPostUpdate) SetTitle(s string) *UnsavedPostUpdate {
	upu.mutation.SetTitle(s)
	return upu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableTitle(s *string) *UnsavedPostUpdate {
	if s != nil {
		upu.SetTitle(*s)
	}
	return upu
}

// ClearTitle clears the value of the "title" field.
func (upu *UnsavedPostUpdate) ClearTitle() *UnsavedPostUpdate {
	upu.mutation.ClearTitle()
	return upu
}

// SetContent sets the "content" field.
func (upu *UnsavedPostUpdate) SetContent(s string) *UnsavedPostUpdate {
	upu.mutation.SetContent(s)
	return upu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableContent(s *string) *UnsavedPostUpdate {
	if s != nil {
		upu.SetContent(*s)
	}
	return upu
}

// ClearContent clears the value of the "content" field.
func (upu *UnsavedPostUpdate) ClearContent() *UnsavedPostUpdate {
	upu.mutation.ClearContent()
	return upu
}

// SetCreatedAt sets the "created_at" field.
func (upu *UnsavedPostUpdate) SetCreatedAt(t time.Time) *UnsavedPostUpdate {
	upu.mutation.SetCreatedAt(t)
	return upu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableCreatedAt(t *time.Time) *UnsavedPostUpdate {
	if t != nil {
		upu.SetCreatedAt(*t)
	}
	return upu
}

// SetModifiedAt sets the "modified_at" field.
func (upu *UnsavedPostUpdate) SetModifiedAt(t time.Time) *UnsavedPostUpdate {
	upu.mutation.SetModifiedAt(t)
	return upu
}

// SetAuthorID sets the "author" edge to the Admin entity by ID.
func (upu *UnsavedPostUpdate) SetAuthorID(id int) *UnsavedPostUpdate {
	upu.mutation.SetAuthorID(id)
	return upu
}

// SetAuthor sets the "author" edge to the Admin entity.
func (upu *UnsavedPostUpdate) SetAuthor(a *Admin) *UnsavedPostUpdate {
	return upu.SetAuthorID(a.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (upu *UnsavedPostUpdate) SetCategoryID(id int) *UnsavedPostUpdate {
	upu.mutation.SetCategoryID(id)
	return upu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableCategoryID(id *int) *UnsavedPostUpdate {
	if id != nil {
		upu = upu.SetCategoryID(*id)
	}
	return upu
}

// SetCategory sets the "category" edge to the Category entity.
func (upu *UnsavedPostUpdate) SetCategory(c *Category) *UnsavedPostUpdate {
	return upu.SetCategoryID(c.ID)
}

// SetThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID.
func (upu *UnsavedPostUpdate) SetThumbnailID(id int) *UnsavedPostUpdate {
	upu.mutation.SetThumbnailID(id)
	return upu
}

// SetNillableThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID if the given value is not nil.
func (upu *UnsavedPostUpdate) SetNillableThumbnailID(id *int) *UnsavedPostUpdate {
	if id != nil {
		upu = upu.SetThumbnailID(*id)
	}
	return upu
}

// SetThumbnail sets the "thumbnail" edge to the UnsavedPostThumbnail entity.
func (upu *UnsavedPostUpdate) SetThumbnail(u *UnsavedPostThumbnail) *UnsavedPostUpdate {
	return upu.SetThumbnailID(u.ID)
}

// AddImageIDs adds the "images" edge to the UnsavedPostImage entity by IDs.
func (upu *UnsavedPostUpdate) AddImageIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.AddImageIDs(ids...)
	return upu
}

// AddImages adds the "images" edges to the UnsavedPostImage entity.
func (upu *UnsavedPostUpdate) AddImages(u ...*UnsavedPostImage) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.AddImageIDs(ids...)
}

// AddVideoIDs adds the "videos" edge to the UnsavedPostVideo entity by IDs.
func (upu *UnsavedPostUpdate) AddVideoIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.AddVideoIDs(ids...)
	return upu
}

// AddVideos adds the "videos" edges to the UnsavedPostVideo entity.
func (upu *UnsavedPostUpdate) AddVideos(u ...*UnsavedPostVideo) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.AddVideoIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the UnsavedPostAttachment entity by IDs.
func (upu *UnsavedPostUpdate) AddAttachmentIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.AddAttachmentIDs(ids...)
	return upu
}

// AddAttachments adds the "attachments" edges to the UnsavedPostAttachment entity.
func (upu *UnsavedPostUpdate) AddAttachments(u ...*UnsavedPostAttachment) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.AddAttachmentIDs(ids...)
}

// Mutation returns the UnsavedPostMutation object of the builder.
func (upu *UnsavedPostUpdate) Mutation() *UnsavedPostMutation {
	return upu.mutation
}

// ClearAuthor clears the "author" edge to the Admin entity.
func (upu *UnsavedPostUpdate) ClearAuthor() *UnsavedPostUpdate {
	upu.mutation.ClearAuthor()
	return upu
}

// ClearCategory clears the "category" edge to the Category entity.
func (upu *UnsavedPostUpdate) ClearCategory() *UnsavedPostUpdate {
	upu.mutation.ClearCategory()
	return upu
}

// ClearThumbnail clears the "thumbnail" edge to the UnsavedPostThumbnail entity.
func (upu *UnsavedPostUpdate) ClearThumbnail() *UnsavedPostUpdate {
	upu.mutation.ClearThumbnail()
	return upu
}

// ClearImages clears all "images" edges to the UnsavedPostImage entity.
func (upu *UnsavedPostUpdate) ClearImages() *UnsavedPostUpdate {
	upu.mutation.ClearImages()
	return upu
}

// RemoveImageIDs removes the "images" edge to UnsavedPostImage entities by IDs.
func (upu *UnsavedPostUpdate) RemoveImageIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.RemoveImageIDs(ids...)
	return upu
}

// RemoveImages removes "images" edges to UnsavedPostImage entities.
func (upu *UnsavedPostUpdate) RemoveImages(u ...*UnsavedPostImage) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.RemoveImageIDs(ids...)
}

// ClearVideos clears all "videos" edges to the UnsavedPostVideo entity.
func (upu *UnsavedPostUpdate) ClearVideos() *UnsavedPostUpdate {
	upu.mutation.ClearVideos()
	return upu
}

// RemoveVideoIDs removes the "videos" edge to UnsavedPostVideo entities by IDs.
func (upu *UnsavedPostUpdate) RemoveVideoIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.RemoveVideoIDs(ids...)
	return upu
}

// RemoveVideos removes "videos" edges to UnsavedPostVideo entities.
func (upu *UnsavedPostUpdate) RemoveVideos(u ...*UnsavedPostVideo) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.RemoveVideoIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the UnsavedPostAttachment entity.
func (upu *UnsavedPostUpdate) ClearAttachments() *UnsavedPostUpdate {
	upu.mutation.ClearAttachments()
	return upu
}

// RemoveAttachmentIDs removes the "attachments" edge to UnsavedPostAttachment entities by IDs.
func (upu *UnsavedPostUpdate) RemoveAttachmentIDs(ids ...int) *UnsavedPostUpdate {
	upu.mutation.RemoveAttachmentIDs(ids...)
	return upu
}

// RemoveAttachments removes "attachments" edges to UnsavedPostAttachment entities.
func (upu *UnsavedPostUpdate) RemoveAttachments(u ...*UnsavedPostAttachment) *UnsavedPostUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upu.RemoveAttachmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UnsavedPostUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	upu.defaults()
	if len(upu.hooks) == 0 {
		if err = upu.check(); err != nil {
			return 0, err
		}
		affected, err = upu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsavedPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upu.check(); err != nil {
				return 0, err
			}
			upu.mutation = mutation
			affected, err = upu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(upu.hooks) - 1; i >= 0; i-- {
			if upu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UnsavedPostUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UnsavedPostUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UnsavedPostUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UnsavedPostUpdate) defaults() {
	if _, ok := upu.mutation.ModifiedAt(); !ok {
		v := unsavedpost.UpdateDefaultModifiedAt()
		upu.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UnsavedPostUpdate) check() error {
	if v, ok := upu.mutation.UUID(); ok {
		if err := unsavedpost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf("ent: validator failed for field \"uuid\": %w", err)}
		}
	}
	if v, ok := upu.mutation.Slug(); ok {
		if err := unsavedpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf("ent: validator failed for field \"slug\": %w", err)}
		}
	}
	if v, ok := upu.mutation.AccessLevel(); ok {
		if err := unsavedpost.AccessLevelValidator(v); err != nil {
			return &ValidationError{Name: "access_level", err: fmt.Errorf("ent: validator failed for field \"access_level\": %w", err)}
		}
	}
	if v, ok := upu.mutation.Title(); ok {
		if err := unsavedpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := upu.mutation.AuthorID(); upu.mutation.AuthorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"author\"")
	}
	return nil
}

func (upu *UnsavedPostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unsavedpost.Table,
			Columns: unsavedpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unsavedpost.FieldID,
			},
		},
	}
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldUUID,
		})
	}
	if value, ok := upu.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldSlug,
		})
	}
	if upu.mutation.SlugCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldSlug,
		})
	}
	if value, ok := upu.mutation.AccessLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: unsavedpost.FieldAccessLevel,
		})
	}
	if upu.mutation.AccessLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: unsavedpost.FieldAccessLevel,
		})
	}
	if value, ok := upu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldTitle,
		})
	}
	if upu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldTitle,
		})
	}
	if value, ok := upu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldContent,
		})
	}
	if upu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldContent,
		})
	}
	if value, ok := upu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldCreatedAt,
		})
	}
	if value, ok := upu.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldModifiedAt,
		})
	}
	if upu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.AuthorTable,
			Columns: []string{unsavedpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.AuthorTable,
			Columns: []string{unsavedpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.CategoryTable,
			Columns: []string{unsavedpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.CategoryTable,
			Columns: []string{unsavedpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unsavedpost.ThumbnailTable,
			Columns: []string{unsavedpost.ThumbnailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostthumbnail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unsavedpost.ThumbnailTable,
			Columns: []string{unsavedpost.ThumbnailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostthumbnail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !upu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.RemovedVideosIDs(); len(nodes) > 0 && !upu.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !upu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unsavedpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UnsavedPostUpdateOne is the builder for updating a single UnsavedPost entity.
type UnsavedPostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UnsavedPostMutation
}

// SetUUID sets the "uuid" field.
func (upuo *UnsavedPostUpdateOne) SetUUID(s string) *UnsavedPostUpdateOne {
	upuo.mutation.SetUUID(s)
	return upuo
}

// SetSlug sets the "slug" field.
func (upuo *UnsavedPostUpdateOne) SetSlug(s string) *UnsavedPostUpdateOne {
	upuo.mutation.SetSlug(s)
	return upuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableSlug(s *string) *UnsavedPostUpdateOne {
	if s != nil {
		upuo.SetSlug(*s)
	}
	return upuo
}

// ClearSlug clears the value of the "slug" field.
func (upuo *UnsavedPostUpdateOne) ClearSlug() *UnsavedPostUpdateOne {
	upuo.mutation.ClearSlug()
	return upuo
}

// SetAccessLevel sets the "access_level" field.
func (upuo *UnsavedPostUpdateOne) SetAccessLevel(ul unsavedpost.AccessLevel) *UnsavedPostUpdateOne {
	upuo.mutation.SetAccessLevel(ul)
	return upuo
}

// SetNillableAccessLevel sets the "access_level" field if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableAccessLevel(ul *unsavedpost.AccessLevel) *UnsavedPostUpdateOne {
	if ul != nil {
		upuo.SetAccessLevel(*ul)
	}
	return upuo
}

// ClearAccessLevel clears the value of the "access_level" field.
func (upuo *UnsavedPostUpdateOne) ClearAccessLevel() *UnsavedPostUpdateOne {
	upuo.mutation.ClearAccessLevel()
	return upuo
}

// SetTitle sets the "title" field.
func (upuo *UnsavedPostUpdateOne) SetTitle(s string) *UnsavedPostUpdateOne {
	upuo.mutation.SetTitle(s)
	return upuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableTitle(s *string) *UnsavedPostUpdateOne {
	if s != nil {
		upuo.SetTitle(*s)
	}
	return upuo
}

// ClearTitle clears the value of the "title" field.
func (upuo *UnsavedPostUpdateOne) ClearTitle() *UnsavedPostUpdateOne {
	upuo.mutation.ClearTitle()
	return upuo
}

// SetContent sets the "content" field.
func (upuo *UnsavedPostUpdateOne) SetContent(s string) *UnsavedPostUpdateOne {
	upuo.mutation.SetContent(s)
	return upuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableContent(s *string) *UnsavedPostUpdateOne {
	if s != nil {
		upuo.SetContent(*s)
	}
	return upuo
}

// ClearContent clears the value of the "content" field.
func (upuo *UnsavedPostUpdateOne) ClearContent() *UnsavedPostUpdateOne {
	upuo.mutation.ClearContent()
	return upuo
}

// SetCreatedAt sets the "created_at" field.
func (upuo *UnsavedPostUpdateOne) SetCreatedAt(t time.Time) *UnsavedPostUpdateOne {
	upuo.mutation.SetCreatedAt(t)
	return upuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableCreatedAt(t *time.Time) *UnsavedPostUpdateOne {
	if t != nil {
		upuo.SetCreatedAt(*t)
	}
	return upuo
}

// SetModifiedAt sets the "modified_at" field.
func (upuo *UnsavedPostUpdateOne) SetModifiedAt(t time.Time) *UnsavedPostUpdateOne {
	upuo.mutation.SetModifiedAt(t)
	return upuo
}

// SetAuthorID sets the "author" edge to the Admin entity by ID.
func (upuo *UnsavedPostUpdateOne) SetAuthorID(id int) *UnsavedPostUpdateOne {
	upuo.mutation.SetAuthorID(id)
	return upuo
}

// SetAuthor sets the "author" edge to the Admin entity.
func (upuo *UnsavedPostUpdateOne) SetAuthor(a *Admin) *UnsavedPostUpdateOne {
	return upuo.SetAuthorID(a.ID)
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (upuo *UnsavedPostUpdateOne) SetCategoryID(id int) *UnsavedPostUpdateOne {
	upuo.mutation.SetCategoryID(id)
	return upuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableCategoryID(id *int) *UnsavedPostUpdateOne {
	if id != nil {
		upuo = upuo.SetCategoryID(*id)
	}
	return upuo
}

// SetCategory sets the "category" edge to the Category entity.
func (upuo *UnsavedPostUpdateOne) SetCategory(c *Category) *UnsavedPostUpdateOne {
	return upuo.SetCategoryID(c.ID)
}

// SetThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID.
func (upuo *UnsavedPostUpdateOne) SetThumbnailID(id int) *UnsavedPostUpdateOne {
	upuo.mutation.SetThumbnailID(id)
	return upuo
}

// SetNillableThumbnailID sets the "thumbnail" edge to the UnsavedPostThumbnail entity by ID if the given value is not nil.
func (upuo *UnsavedPostUpdateOne) SetNillableThumbnailID(id *int) *UnsavedPostUpdateOne {
	if id != nil {
		upuo = upuo.SetThumbnailID(*id)
	}
	return upuo
}

// SetThumbnail sets the "thumbnail" edge to the UnsavedPostThumbnail entity.
func (upuo *UnsavedPostUpdateOne) SetThumbnail(u *UnsavedPostThumbnail) *UnsavedPostUpdateOne {
	return upuo.SetThumbnailID(u.ID)
}

// AddImageIDs adds the "images" edge to the UnsavedPostImage entity by IDs.
func (upuo *UnsavedPostUpdateOne) AddImageIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.AddImageIDs(ids...)
	return upuo
}

// AddImages adds the "images" edges to the UnsavedPostImage entity.
func (upuo *UnsavedPostUpdateOne) AddImages(u ...*UnsavedPostImage) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.AddImageIDs(ids...)
}

// AddVideoIDs adds the "videos" edge to the UnsavedPostVideo entity by IDs.
func (upuo *UnsavedPostUpdateOne) AddVideoIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.AddVideoIDs(ids...)
	return upuo
}

// AddVideos adds the "videos" edges to the UnsavedPostVideo entity.
func (upuo *UnsavedPostUpdateOne) AddVideos(u ...*UnsavedPostVideo) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.AddVideoIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the UnsavedPostAttachment entity by IDs.
func (upuo *UnsavedPostUpdateOne) AddAttachmentIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.AddAttachmentIDs(ids...)
	return upuo
}

// AddAttachments adds the "attachments" edges to the UnsavedPostAttachment entity.
func (upuo *UnsavedPostUpdateOne) AddAttachments(u ...*UnsavedPostAttachment) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.AddAttachmentIDs(ids...)
}

// Mutation returns the UnsavedPostMutation object of the builder.
func (upuo *UnsavedPostUpdateOne) Mutation() *UnsavedPostMutation {
	return upuo.mutation
}

// ClearAuthor clears the "author" edge to the Admin entity.
func (upuo *UnsavedPostUpdateOne) ClearAuthor() *UnsavedPostUpdateOne {
	upuo.mutation.ClearAuthor()
	return upuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (upuo *UnsavedPostUpdateOne) ClearCategory() *UnsavedPostUpdateOne {
	upuo.mutation.ClearCategory()
	return upuo
}

// ClearThumbnail clears the "thumbnail" edge to the UnsavedPostThumbnail entity.
func (upuo *UnsavedPostUpdateOne) ClearThumbnail() *UnsavedPostUpdateOne {
	upuo.mutation.ClearThumbnail()
	return upuo
}

// ClearImages clears all "images" edges to the UnsavedPostImage entity.
func (upuo *UnsavedPostUpdateOne) ClearImages() *UnsavedPostUpdateOne {
	upuo.mutation.ClearImages()
	return upuo
}

// RemoveImageIDs removes the "images" edge to UnsavedPostImage entities by IDs.
func (upuo *UnsavedPostUpdateOne) RemoveImageIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.RemoveImageIDs(ids...)
	return upuo
}

// RemoveImages removes "images" edges to UnsavedPostImage entities.
func (upuo *UnsavedPostUpdateOne) RemoveImages(u ...*UnsavedPostImage) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.RemoveImageIDs(ids...)
}

// ClearVideos clears all "videos" edges to the UnsavedPostVideo entity.
func (upuo *UnsavedPostUpdateOne) ClearVideos() *UnsavedPostUpdateOne {
	upuo.mutation.ClearVideos()
	return upuo
}

// RemoveVideoIDs removes the "videos" edge to UnsavedPostVideo entities by IDs.
func (upuo *UnsavedPostUpdateOne) RemoveVideoIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.RemoveVideoIDs(ids...)
	return upuo
}

// RemoveVideos removes "videos" edges to UnsavedPostVideo entities.
func (upuo *UnsavedPostUpdateOne) RemoveVideos(u ...*UnsavedPostVideo) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.RemoveVideoIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the UnsavedPostAttachment entity.
func (upuo *UnsavedPostUpdateOne) ClearAttachments() *UnsavedPostUpdateOne {
	upuo.mutation.ClearAttachments()
	return upuo
}

// RemoveAttachmentIDs removes the "attachments" edge to UnsavedPostAttachment entities by IDs.
func (upuo *UnsavedPostUpdateOne) RemoveAttachmentIDs(ids ...int) *UnsavedPostUpdateOne {
	upuo.mutation.RemoveAttachmentIDs(ids...)
	return upuo
}

// RemoveAttachments removes "attachments" edges to UnsavedPostAttachment entities.
func (upuo *UnsavedPostUpdateOne) RemoveAttachments(u ...*UnsavedPostAttachment) *UnsavedPostUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return upuo.RemoveAttachmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UnsavedPostUpdateOne) Select(field string, fields ...string) *UnsavedPostUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UnsavedPost entity.
func (upuo *UnsavedPostUpdateOne) Save(ctx context.Context) (*UnsavedPost, error) {
	var (
		err  error
		node *UnsavedPost
	)
	upuo.defaults()
	if len(upuo.hooks) == 0 {
		if err = upuo.check(); err != nil {
			return nil, err
		}
		node, err = upuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsavedPostMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upuo.check(); err != nil {
				return nil, err
			}
			upuo.mutation = mutation
			node, err = upuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(upuo.hooks) - 1; i >= 0; i-- {
			if upuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UnsavedPostUpdateOne) SaveX(ctx context.Context) *UnsavedPost {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UnsavedPostUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UnsavedPostUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UnsavedPostUpdateOne) defaults() {
	if _, ok := upuo.mutation.ModifiedAt(); !ok {
		v := unsavedpost.UpdateDefaultModifiedAt()
		upuo.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UnsavedPostUpdateOne) check() error {
	if v, ok := upuo.mutation.UUID(); ok {
		if err := unsavedpost.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf("ent: validator failed for field \"uuid\": %w", err)}
		}
	}
	if v, ok := upuo.mutation.Slug(); ok {
		if err := unsavedpost.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf("ent: validator failed for field \"slug\": %w", err)}
		}
	}
	if v, ok := upuo.mutation.AccessLevel(); ok {
		if err := unsavedpost.AccessLevelValidator(v); err != nil {
			return &ValidationError{Name: "access_level", err: fmt.Errorf("ent: validator failed for field \"access_level\": %w", err)}
		}
	}
	if v, ok := upuo.mutation.Title(); ok {
		if err := unsavedpost.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if _, ok := upuo.mutation.AuthorID(); upuo.mutation.AuthorCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"author\"")
	}
	return nil
}

func (upuo *UnsavedPostUpdateOne) sqlSave(ctx context.Context) (_node *UnsavedPost, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unsavedpost.Table,
			Columns: unsavedpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unsavedpost.FieldID,
			},
		},
	}
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing UnsavedPost.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unsavedpost.FieldID)
		for _, f := range fields {
			if !unsavedpost.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != unsavedpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldUUID,
		})
	}
	if value, ok := upuo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldSlug,
		})
	}
	if upuo.mutation.SlugCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldSlug,
		})
	}
	if value, ok := upuo.mutation.AccessLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: unsavedpost.FieldAccessLevel,
		})
	}
	if upuo.mutation.AccessLevelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Column: unsavedpost.FieldAccessLevel,
		})
	}
	if value, ok := upuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldTitle,
		})
	}
	if upuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldTitle,
		})
	}
	if value, ok := upuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpost.FieldContent,
		})
	}
	if upuo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: unsavedpost.FieldContent,
		})
	}
	if value, ok := upuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldCreatedAt,
		})
	}
	if value, ok := upuo.mutation.ModifiedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpost.FieldModifiedAt,
		})
	}
	if upuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.AuthorTable,
			Columns: []string{unsavedpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.AuthorTable,
			Columns: []string{unsavedpost.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.CategoryTable,
			Columns: []string{unsavedpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpost.CategoryTable,
			Columns: []string{unsavedpost.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.ThumbnailCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unsavedpost.ThumbnailTable,
			Columns: []string{unsavedpost.ThumbnailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostthumbnail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.ThumbnailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   unsavedpost.ThumbnailTable,
			Columns: []string{unsavedpost.ThumbnailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostthumbnail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !upuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.ImagesTable,
			Columns: []string{unsavedpost.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.RemovedVideosIDs(); len(nodes) > 0 && !upuo.mutation.VideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.VideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.VideosTable,
			Columns: []string{unsavedpost.VideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostvideo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !upuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   unsavedpost.AttachmentsTable,
			Columns: []string{unsavedpost.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpostattachment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UnsavedPost{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{unsavedpost.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
