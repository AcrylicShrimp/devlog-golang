// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"devlog/ent/admin"
	"devlog/ent/category"
	"devlog/ent/predicate"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"devlog/ent/unsavedpostimage"
	"devlog/ent/unsavedpostthumbnail"
	"devlog/ent/unsavedpostvideo"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnsavedPostQuery is the builder for querying UnsavedPost entities.
type UnsavedPostQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.UnsavedPost
	// eager-loading edges.
	withAuthor      *AdminQuery
	withCategory    *CategoryQuery
	withThumbnail   *UnsavedPostThumbnailQuery
	withImages      *UnsavedPostImageQuery
	withVideos      *UnsavedPostVideoQuery
	withAttachments *UnsavedPostAttachmentQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UnsavedPostQuery builder.
func (upq *UnsavedPostQuery) Where(ps ...predicate.UnsavedPost) *UnsavedPostQuery {
	upq.predicates = append(upq.predicates, ps...)
	return upq
}

// Limit adds a limit step to the query.
func (upq *UnsavedPostQuery) Limit(limit int) *UnsavedPostQuery {
	upq.limit = &limit
	return upq
}

// Offset adds an offset step to the query.
func (upq *UnsavedPostQuery) Offset(offset int) *UnsavedPostQuery {
	upq.offset = &offset
	return upq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (upq *UnsavedPostQuery) Unique(unique bool) *UnsavedPostQuery {
	upq.unique = &unique
	return upq
}

// Order adds an order step to the query.
func (upq *UnsavedPostQuery) Order(o ...OrderFunc) *UnsavedPostQuery {
	upq.order = append(upq.order, o...)
	return upq
}

// QueryAuthor chains the current query on the "author" edge.
func (upq *UnsavedPostQuery) QueryAuthor() *AdminQuery {
	query := &AdminQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpost.AuthorTable, unsavedpost.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategory chains the current query on the "category" edge.
func (upq *UnsavedPostQuery) QueryCategory() *CategoryQuery {
	query := &CategoryQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpost.CategoryTable, unsavedpost.CategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryThumbnail chains the current query on the "thumbnail" edge.
func (upq *UnsavedPostQuery) QueryThumbnail() *UnsavedPostThumbnailQuery {
	query := &UnsavedPostThumbnailQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(unsavedpostthumbnail.Table, unsavedpostthumbnail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, unsavedpost.ThumbnailTable, unsavedpost.ThumbnailColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImages chains the current query on the "images" edge.
func (upq *UnsavedPostQuery) QueryImages() *UnsavedPostImageQuery {
	query := &UnsavedPostImageQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(unsavedpostimage.Table, unsavedpostimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.ImagesTable, unsavedpost.ImagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryVideos chains the current query on the "videos" edge.
func (upq *UnsavedPostQuery) QueryVideos() *UnsavedPostVideoQuery {
	query := &UnsavedPostVideoQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(unsavedpostvideo.Table, unsavedpostvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.VideosTable, unsavedpost.VideosColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttachments chains the current query on the "attachments" edge.
func (upq *UnsavedPostQuery) QueryAttachments() *UnsavedPostAttachmentQuery {
	query := &UnsavedPostAttachmentQuery{config: upq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, selector),
			sqlgraph.To(unsavedpostattachment.Table, unsavedpostattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.AttachmentsTable, unsavedpost.AttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(upq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UnsavedPost entity from the query.
// Returns a *NotFoundError when no UnsavedPost was found.
func (upq *UnsavedPostQuery) First(ctx context.Context) (*UnsavedPost, error) {
	nodes, err := upq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{unsavedpost.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (upq *UnsavedPostQuery) FirstX(ctx context.Context) *UnsavedPost {
	node, err := upq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UnsavedPost ID from the query.
// Returns a *NotFoundError when no UnsavedPost ID was found.
func (upq *UnsavedPostQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = upq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{unsavedpost.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (upq *UnsavedPostQuery) FirstIDX(ctx context.Context) int {
	id, err := upq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UnsavedPost entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one UnsavedPost entity is not found.
// Returns a *NotFoundError when no UnsavedPost entities are found.
func (upq *UnsavedPostQuery) Only(ctx context.Context) (*UnsavedPost, error) {
	nodes, err := upq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{unsavedpost.Label}
	default:
		return nil, &NotSingularError{unsavedpost.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (upq *UnsavedPostQuery) OnlyX(ctx context.Context) *UnsavedPost {
	node, err := upq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UnsavedPost ID in the query.
// Returns a *NotSingularError when exactly one UnsavedPost ID is not found.
// Returns a *NotFoundError when no entities are found.
func (upq *UnsavedPostQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = upq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = &NotSingularError{unsavedpost.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (upq *UnsavedPostQuery) OnlyIDX(ctx context.Context) int {
	id, err := upq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UnsavedPosts.
func (upq *UnsavedPostQuery) All(ctx context.Context) ([]*UnsavedPost, error) {
	if err := upq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return upq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (upq *UnsavedPostQuery) AllX(ctx context.Context) []*UnsavedPost {
	nodes, err := upq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UnsavedPost IDs.
func (upq *UnsavedPostQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := upq.Select(unsavedpost.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (upq *UnsavedPostQuery) IDsX(ctx context.Context) []int {
	ids, err := upq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (upq *UnsavedPostQuery) Count(ctx context.Context) (int, error) {
	if err := upq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return upq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (upq *UnsavedPostQuery) CountX(ctx context.Context) int {
	count, err := upq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (upq *UnsavedPostQuery) Exist(ctx context.Context) (bool, error) {
	if err := upq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return upq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (upq *UnsavedPostQuery) ExistX(ctx context.Context) bool {
	exist, err := upq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UnsavedPostQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (upq *UnsavedPostQuery) Clone() *UnsavedPostQuery {
	if upq == nil {
		return nil
	}
	return &UnsavedPostQuery{
		config:          upq.config,
		limit:           upq.limit,
		offset:          upq.offset,
		order:           append([]OrderFunc{}, upq.order...),
		predicates:      append([]predicate.UnsavedPost{}, upq.predicates...),
		withAuthor:      upq.withAuthor.Clone(),
		withCategory:    upq.withCategory.Clone(),
		withThumbnail:   upq.withThumbnail.Clone(),
		withImages:      upq.withImages.Clone(),
		withVideos:      upq.withVideos.Clone(),
		withAttachments: upq.withAttachments.Clone(),
		// clone intermediate query.
		sql:  upq.sql.Clone(),
		path: upq.path,
	}
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithAuthor(opts ...func(*AdminQuery)) *UnsavedPostQuery {
	query := &AdminQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withAuthor = query
	return upq
}

// WithCategory tells the query-builder to eager-load the nodes that are connected to
// the "category" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithCategory(opts ...func(*CategoryQuery)) *UnsavedPostQuery {
	query := &CategoryQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withCategory = query
	return upq
}

// WithThumbnail tells the query-builder to eager-load the nodes that are connected to
// the "thumbnail" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithThumbnail(opts ...func(*UnsavedPostThumbnailQuery)) *UnsavedPostQuery {
	query := &UnsavedPostThumbnailQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withThumbnail = query
	return upq
}

// WithImages tells the query-builder to eager-load the nodes that are connected to
// the "images" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithImages(opts ...func(*UnsavedPostImageQuery)) *UnsavedPostQuery {
	query := &UnsavedPostImageQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withImages = query
	return upq
}

// WithVideos tells the query-builder to eager-load the nodes that are connected to
// the "videos" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithVideos(opts ...func(*UnsavedPostVideoQuery)) *UnsavedPostQuery {
	query := &UnsavedPostVideoQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withVideos = query
	return upq
}

// WithAttachments tells the query-builder to eager-load the nodes that are connected to
// the "attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (upq *UnsavedPostQuery) WithAttachments(opts ...func(*UnsavedPostAttachmentQuery)) *UnsavedPostQuery {
	query := &UnsavedPostAttachmentQuery{config: upq.config}
	for _, opt := range opts {
		opt(query)
	}
	upq.withAttachments = query
	return upq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UnsavedPost.Query().
//		GroupBy(unsavedpost.FieldUUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (upq *UnsavedPostQuery) GroupBy(field string, fields ...string) *UnsavedPostGroupBy {
	group := &UnsavedPostGroupBy{config: upq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := upq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return upq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UUID string `json:"uuid,omitempty"`
//	}
//
//	client.UnsavedPost.Query().
//		Select(unsavedpost.FieldUUID).
//		Scan(ctx, &v)
//
func (upq *UnsavedPostQuery) Select(field string, fields ...string) *UnsavedPostSelect {
	upq.fields = append([]string{field}, fields...)
	return &UnsavedPostSelect{UnsavedPostQuery: upq}
}

func (upq *UnsavedPostQuery) prepareQuery(ctx context.Context) error {
	for _, f := range upq.fields {
		if !unsavedpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if upq.path != nil {
		prev, err := upq.path(ctx)
		if err != nil {
			return err
		}
		upq.sql = prev
	}
	return nil
}

func (upq *UnsavedPostQuery) sqlAll(ctx context.Context) ([]*UnsavedPost, error) {
	var (
		nodes       = []*UnsavedPost{}
		withFKs     = upq.withFKs
		_spec       = upq.querySpec()
		loadedTypes = [6]bool{
			upq.withAuthor != nil,
			upq.withCategory != nil,
			upq.withThumbnail != nil,
			upq.withImages != nil,
			upq.withVideos != nil,
			upq.withAttachments != nil,
		}
	)
	if upq.withAuthor != nil || upq.withCategory != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, unsavedpost.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &UnsavedPost{config: upq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, upq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := upq.withAuthor; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UnsavedPost)
		for i := range nodes {
			if nodes[i].admin_unsaved_posts == nil {
				continue
			}
			fk := *nodes[i].admin_unsaved_posts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_unsaved_posts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Author = n
			}
		}
	}

	if query := upq.withCategory; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*UnsavedPost)
		for i := range nodes {
			if nodes[i].category_unsaved_posts == nil {
				continue
			}
			fk := *nodes[i].category_unsaved_posts
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(category.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "category_unsaved_posts" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Category = n
			}
		}
	}

	if query := upq.withThumbnail; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UnsavedPost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.UnsavedPostThumbnail(func(s *sql.Selector) {
			s.Where(sql.InValues(unsavedpost.ThumbnailColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.unsaved_post_thumbnail
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "unsaved_post_thumbnail" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "unsaved_post_thumbnail" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Thumbnail = n
		}
	}

	if query := upq.withImages; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UnsavedPost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Images = []*UnsavedPostImage{}
		}
		query.withFKs = true
		query.Where(predicate.UnsavedPostImage(func(s *sql.Selector) {
			s.Where(sql.InValues(unsavedpost.ImagesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.unsaved_post_images
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "unsaved_post_images" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "unsaved_post_images" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Images = append(node.Edges.Images, n)
		}
	}

	if query := upq.withVideos; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UnsavedPost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Videos = []*UnsavedPostVideo{}
		}
		query.withFKs = true
		query.Where(predicate.UnsavedPostVideo(func(s *sql.Selector) {
			s.Where(sql.InValues(unsavedpost.VideosColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.unsaved_post_videos
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "unsaved_post_videos" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "unsaved_post_videos" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Videos = append(node.Edges.Videos, n)
		}
	}

	if query := upq.withAttachments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*UnsavedPost)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Attachments = []*UnsavedPostAttachment{}
		}
		query.withFKs = true
		query.Where(predicate.UnsavedPostAttachment(func(s *sql.Selector) {
			s.Where(sql.InValues(unsavedpost.AttachmentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.unsaved_post_attachments
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "unsaved_post_attachments" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "unsaved_post_attachments" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Attachments = append(node.Edges.Attachments, n)
		}
	}

	return nodes, nil
}

func (upq *UnsavedPostQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := upq.querySpec()
	return sqlgraph.CountNodes(ctx, upq.driver, _spec)
}

func (upq *UnsavedPostQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := upq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (upq *UnsavedPostQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   unsavedpost.Table,
			Columns: unsavedpost.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unsavedpost.FieldID,
			},
		},
		From:   upq.sql,
		Unique: true,
	}
	if unique := upq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := upq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, unsavedpost.FieldID)
		for i := range fields {
			if fields[i] != unsavedpost.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := upq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := upq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := upq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := upq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (upq *UnsavedPostQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(upq.driver.Dialect())
	t1 := builder.Table(unsavedpost.Table)
	selector := builder.Select(t1.Columns(unsavedpost.Columns...)...).From(t1)
	if upq.sql != nil {
		selector = upq.sql
		selector.Select(selector.Columns(unsavedpost.Columns...)...)
	}
	for _, p := range upq.predicates {
		p(selector)
	}
	for _, p := range upq.order {
		p(selector)
	}
	if offset := upq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := upq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UnsavedPostGroupBy is the group-by builder for UnsavedPost entities.
type UnsavedPostGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (upgb *UnsavedPostGroupBy) Aggregate(fns ...AggregateFunc) *UnsavedPostGroupBy {
	upgb.fns = append(upgb.fns, fns...)
	return upgb
}

// Scan applies the group-by query and scans the result into the given value.
func (upgb *UnsavedPostGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := upgb.path(ctx)
	if err != nil {
		return err
	}
	upgb.sql = query
	return upgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := upgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(upgb.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := upgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) StringsX(ctx context.Context) []string {
	v, err := upgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = upgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) StringX(ctx context.Context) string {
	v, err := upgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(upgb.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := upgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) IntsX(ctx context.Context) []int {
	v, err := upgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = upgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) IntX(ctx context.Context) int {
	v, err := upgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(upgb.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := upgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := upgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = upgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) Float64X(ctx context.Context) float64 {
	v, err := upgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(upgb.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := upgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := upgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (upgb *UnsavedPostGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = upgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (upgb *UnsavedPostGroupBy) BoolX(ctx context.Context) bool {
	v, err := upgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (upgb *UnsavedPostGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range upgb.fields {
		if !unsavedpost.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := upgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := upgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (upgb *UnsavedPostGroupBy) sqlQuery() *sql.Selector {
	selector := upgb.sql
	columns := make([]string, 0, len(upgb.fields)+len(upgb.fns))
	columns = append(columns, upgb.fields...)
	for _, fn := range upgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(upgb.fields...)
}

// UnsavedPostSelect is the builder for selecting fields of UnsavedPost entities.
type UnsavedPostSelect struct {
	*UnsavedPostQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ups *UnsavedPostSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ups.prepareQuery(ctx); err != nil {
		return err
	}
	ups.sql = ups.UnsavedPostQuery.sqlQuery(ctx)
	return ups.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ups *UnsavedPostSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ups.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ups.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ups.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ups *UnsavedPostSelect) StringsX(ctx context.Context) []string {
	v, err := ups.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ups.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ups *UnsavedPostSelect) StringX(ctx context.Context) string {
	v, err := ups.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ups.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ups.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ups *UnsavedPostSelect) IntsX(ctx context.Context) []int {
	v, err := ups.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ups.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ups *UnsavedPostSelect) IntX(ctx context.Context) int {
	v, err := ups.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ups.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ups.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ups *UnsavedPostSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ups.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ups.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ups *UnsavedPostSelect) Float64X(ctx context.Context) float64 {
	v, err := ups.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ups.fields) > 1 {
		return nil, errors.New("ent: UnsavedPostSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ups.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ups *UnsavedPostSelect) BoolsX(ctx context.Context) []bool {
	v, err := ups.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ups *UnsavedPostSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ups.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{unsavedpost.Label}
	default:
		err = fmt.Errorf("ent: UnsavedPostSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ups *UnsavedPostSelect) BoolX(ctx context.Context) bool {
	v, err := ups.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ups *UnsavedPostSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ups.sqlQuery().Query()
	if err := ups.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ups *UnsavedPostSelect) sqlQuery() sql.Querier {
	selector := ups.sql
	selector.Select(selector.Columns(ups.fields...)...)
	return selector
}
