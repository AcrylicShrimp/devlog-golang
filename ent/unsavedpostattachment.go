// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UnsavedPostAttachment is the model entity for the UnsavedPostAttachment schema.
type UnsavedPostAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Validity holds the value of the "validity" field.
	Validity unsavedpostattachment.Validity `json:"validity,omitempty"`
	// Size holds the value of the "size" field.
	Size *uint64 `json:"size,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Mime holds the value of the "mime" field.
	Mime *string `json:"mime,omitempty"`
	// URL holds the value of the "url" field.
	URL *string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnsavedPostAttachmentQuery when eager-loading is set.
	Edges                    UnsavedPostAttachmentEdges `json:"edges"`
	unsaved_post_attachments *int
}

// UnsavedPostAttachmentEdges holds the relations/edges for other nodes in the graph.
type UnsavedPostAttachmentEdges struct {
	// UnsavedPost holds the value of the unsaved_post edge.
	UnsavedPost *UnsavedPost `json:"unsaved_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UnsavedPostOrErr returns the UnsavedPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnsavedPostAttachmentEdges) UnsavedPostOrErr() (*UnsavedPost, error) {
	if e.loadedTypes[0] {
		if e.UnsavedPost == nil {
			// The edge unsaved_post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unsavedpost.Label}
		}
		return e.UnsavedPost, nil
	}
	return nil, &NotLoadedError{edge: "unsaved_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnsavedPostAttachment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case unsavedpostattachment.FieldID, unsavedpostattachment.FieldSize:
			values[i] = new(sql.NullInt64)
		case unsavedpostattachment.FieldUUID, unsavedpostattachment.FieldValidity, unsavedpostattachment.FieldName, unsavedpostattachment.FieldMime, unsavedpostattachment.FieldURL:
			values[i] = new(sql.NullString)
		case unsavedpostattachment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case unsavedpostattachment.ForeignKeys[0]: // unsaved_post_attachments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UnsavedPostAttachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnsavedPostAttachment fields.
func (upa *UnsavedPostAttachment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unsavedpostattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upa.ID = int(value.Int64)
		case unsavedpostattachment.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				upa.UUID = value.String
			}
		case unsavedpostattachment.FieldValidity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validity", values[i])
			} else if value.Valid {
				upa.Validity = unsavedpostattachment.Validity(value.String)
			}
		case unsavedpostattachment.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				upa.Size = new(uint64)
				*upa.Size = uint64(value.Int64)
			}
		case unsavedpostattachment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				upa.Name = new(string)
				*upa.Name = value.String
			}
		case unsavedpostattachment.FieldMime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime", values[i])
			} else if value.Valid {
				upa.Mime = new(string)
				*upa.Mime = value.String
			}
		case unsavedpostattachment.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				upa.URL = new(string)
				*upa.URL = value.String
			}
		case unsavedpostattachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				upa.CreatedAt = value.Time
			}
		case unsavedpostattachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field unsaved_post_attachments", value)
			} else if value.Valid {
				upa.unsaved_post_attachments = new(int)
				*upa.unsaved_post_attachments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUnsavedPost queries the "unsaved_post" edge of the UnsavedPostAttachment entity.
func (upa *UnsavedPostAttachment) QueryUnsavedPost() *UnsavedPostQuery {
	return (&UnsavedPostAttachmentClient{config: upa.config}).QueryUnsavedPost(upa)
}

// Update returns a builder for updating this UnsavedPostAttachment.
// Note that you need to call UnsavedPostAttachment.Unwrap() before calling this method if this UnsavedPostAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (upa *UnsavedPostAttachment) Update() *UnsavedPostAttachmentUpdateOne {
	return (&UnsavedPostAttachmentClient{config: upa.config}).UpdateOne(upa)
}

// Unwrap unwraps the UnsavedPostAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upa *UnsavedPostAttachment) Unwrap() *UnsavedPostAttachment {
	tx, ok := upa.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnsavedPostAttachment is not a transactional entity")
	}
	upa.config.driver = tx.drv
	return upa
}

// String implements the fmt.Stringer.
func (upa *UnsavedPostAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("UnsavedPostAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v", upa.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(upa.UUID)
	builder.WriteString(", validity=")
	builder.WriteString(fmt.Sprintf("%v", upa.Validity))
	if v := upa.Size; v != nil {
		builder.WriteString(", size=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := upa.Name; v != nil {
		builder.WriteString(", name=")
		builder.WriteString(*v)
	}
	if v := upa.Mime; v != nil {
		builder.WriteString(", mime=")
		builder.WriteString(*v)
	}
	if v := upa.URL; v != nil {
		builder.WriteString(", url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(upa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UnsavedPostAttachments is a parsable slice of UnsavedPostAttachment.
type UnsavedPostAttachments []*UnsavedPostAttachment

func (upa UnsavedPostAttachments) config(cfg config) {
	for _i := range upa {
		upa[_i].config = cfg
	}
}
