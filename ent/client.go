// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"devlog/ent/migrate"

	"devlog/ent/admin"
	"devlog/ent/adminsession"
	"devlog/ent/category"
	"devlog/ent/post"
	"devlog/ent/postattachment"
	"devlog/ent/postimage"
	"devlog/ent/postthumbnail"
	"devlog/ent/postvideo"
	"devlog/ent/robotaccess"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"devlog/ent/unsavedpostimage"
	"devlog/ent/unsavedpostthumbnail"
	"devlog/ent/unsavedpostvideo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Admin is the client for interacting with the Admin builders.
	Admin *AdminClient
	// AdminSession is the client for interacting with the AdminSession builders.
	AdminSession *AdminSessionClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// PostAttachment is the client for interacting with the PostAttachment builders.
	PostAttachment *PostAttachmentClient
	// PostImage is the client for interacting with the PostImage builders.
	PostImage *PostImageClient
	// PostThumbnail is the client for interacting with the PostThumbnail builders.
	PostThumbnail *PostThumbnailClient
	// PostVideo is the client for interacting with the PostVideo builders.
	PostVideo *PostVideoClient
	// RobotAccess is the client for interacting with the RobotAccess builders.
	RobotAccess *RobotAccessClient
	// UnsavedPost is the client for interacting with the UnsavedPost builders.
	UnsavedPost *UnsavedPostClient
	// UnsavedPostAttachment is the client for interacting with the UnsavedPostAttachment builders.
	UnsavedPostAttachment *UnsavedPostAttachmentClient
	// UnsavedPostImage is the client for interacting with the UnsavedPostImage builders.
	UnsavedPostImage *UnsavedPostImageClient
	// UnsavedPostThumbnail is the client for interacting with the UnsavedPostThumbnail builders.
	UnsavedPostThumbnail *UnsavedPostThumbnailClient
	// UnsavedPostVideo is the client for interacting with the UnsavedPostVideo builders.
	UnsavedPostVideo *UnsavedPostVideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Admin = NewAdminClient(c.config)
	c.AdminSession = NewAdminSessionClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Post = NewPostClient(c.config)
	c.PostAttachment = NewPostAttachmentClient(c.config)
	c.PostImage = NewPostImageClient(c.config)
	c.PostThumbnail = NewPostThumbnailClient(c.config)
	c.PostVideo = NewPostVideoClient(c.config)
	c.RobotAccess = NewRobotAccessClient(c.config)
	c.UnsavedPost = NewUnsavedPostClient(c.config)
	c.UnsavedPostAttachment = NewUnsavedPostAttachmentClient(c.config)
	c.UnsavedPostImage = NewUnsavedPostImageClient(c.config)
	c.UnsavedPostThumbnail = NewUnsavedPostThumbnailClient(c.config)
	c.UnsavedPostVideo = NewUnsavedPostVideoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Admin:                 NewAdminClient(cfg),
		AdminSession:          NewAdminSessionClient(cfg),
		Category:              NewCategoryClient(cfg),
		Post:                  NewPostClient(cfg),
		PostAttachment:        NewPostAttachmentClient(cfg),
		PostImage:             NewPostImageClient(cfg),
		PostThumbnail:         NewPostThumbnailClient(cfg),
		PostVideo:             NewPostVideoClient(cfg),
		RobotAccess:           NewRobotAccessClient(cfg),
		UnsavedPost:           NewUnsavedPostClient(cfg),
		UnsavedPostAttachment: NewUnsavedPostAttachmentClient(cfg),
		UnsavedPostImage:      NewUnsavedPostImageClient(cfg),
		UnsavedPostThumbnail:  NewUnsavedPostThumbnailClient(cfg),
		UnsavedPostVideo:      NewUnsavedPostVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                cfg,
		Admin:                 NewAdminClient(cfg),
		AdminSession:          NewAdminSessionClient(cfg),
		Category:              NewCategoryClient(cfg),
		Post:                  NewPostClient(cfg),
		PostAttachment:        NewPostAttachmentClient(cfg),
		PostImage:             NewPostImageClient(cfg),
		PostThumbnail:         NewPostThumbnailClient(cfg),
		PostVideo:             NewPostVideoClient(cfg),
		RobotAccess:           NewRobotAccessClient(cfg),
		UnsavedPost:           NewUnsavedPostClient(cfg),
		UnsavedPostAttachment: NewUnsavedPostAttachmentClient(cfg),
		UnsavedPostImage:      NewUnsavedPostImageClient(cfg),
		UnsavedPostThumbnail:  NewUnsavedPostThumbnailClient(cfg),
		UnsavedPostVideo:      NewUnsavedPostVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Admin.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Admin.Use(hooks...)
	c.AdminSession.Use(hooks...)
	c.Category.Use(hooks...)
	c.Post.Use(hooks...)
	c.PostAttachment.Use(hooks...)
	c.PostImage.Use(hooks...)
	c.PostThumbnail.Use(hooks...)
	c.PostVideo.Use(hooks...)
	c.RobotAccess.Use(hooks...)
	c.UnsavedPost.Use(hooks...)
	c.UnsavedPostAttachment.Use(hooks...)
	c.UnsavedPostImage.Use(hooks...)
	c.UnsavedPostThumbnail.Use(hooks...)
	c.UnsavedPostVideo.Use(hooks...)
}

// AdminClient is a client for the Admin schema.
type AdminClient struct {
	config
}

// NewAdminClient returns a client for the Admin from the given config.
func NewAdminClient(c config) *AdminClient {
	return &AdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `admin.Hooks(f(g(h())))`.
func (c *AdminClient) Use(hooks ...Hook) {
	c.hooks.Admin = append(c.hooks.Admin, hooks...)
}

// Create returns a create builder for Admin.
func (c *AdminClient) Create() *AdminCreate {
	mutation := newAdminMutation(c.config, OpCreate)
	return &AdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Admin entities.
func (c *AdminClient) CreateBulk(builders ...*AdminCreate) *AdminCreateBulk {
	return &AdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Admin.
func (c *AdminClient) Update() *AdminUpdate {
	mutation := newAdminMutation(c.config, OpUpdate)
	return &AdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminClient) UpdateOne(a *Admin) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdmin(a))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminClient) UpdateOneID(id int) *AdminUpdateOne {
	mutation := newAdminMutation(c.config, OpUpdateOne, withAdminID(id))
	return &AdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Admin.
func (c *AdminClient) Delete() *AdminDelete {
	mutation := newAdminMutation(c.config, OpDelete)
	return &AdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminClient) DeleteOne(a *Admin) *AdminDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminClient) DeleteOneID(id int) *AdminDeleteOne {
	builder := c.Delete().Where(admin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminDeleteOne{builder}
}

// Query returns a query builder for Admin.
func (c *AdminClient) Query() *AdminQuery {
	return &AdminQuery{
		config: c.config,
	}
}

// Get returns a Admin entity by its id.
func (c *AdminClient) Get(ctx context.Context, id int) (*Admin, error) {
	return c.Query().Where(admin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminClient) GetX(ctx context.Context, id int) *Admin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySessions queries the sessions edge of a Admin.
func (c *AdminClient) QuerySessions(a *Admin) *AdminSessionQuery {
	query := &AdminSessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(adminsession.Table, adminsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.SessionsTable, admin.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRobotAccesses queries the robot_accesses edge of a Admin.
func (c *AdminClient) QueryRobotAccesses(a *Admin) *RobotAccessQuery {
	query := &RobotAccessQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(robotaccess.Table, robotaccess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.RobotAccessesTable, admin.RobotAccessesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosts queries the posts edge of a Admin.
func (c *AdminClient) QueryPosts(a *Admin) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.PostsTable, admin.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnsavedPosts queries the unsaved_posts edge of a Admin.
func (c *AdminClient) QueryUnsavedPosts(a *Admin) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(admin.Table, admin.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, admin.UnsavedPostsTable, admin.UnsavedPostsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminClient) Hooks() []Hook {
	return c.hooks.Admin
}

// AdminSessionClient is a client for the AdminSession schema.
type AdminSessionClient struct {
	config
}

// NewAdminSessionClient returns a client for the AdminSession from the given config.
func NewAdminSessionClient(c config) *AdminSessionClient {
	return &AdminSessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminsession.Hooks(f(g(h())))`.
func (c *AdminSessionClient) Use(hooks ...Hook) {
	c.hooks.AdminSession = append(c.hooks.AdminSession, hooks...)
}

// Create returns a create builder for AdminSession.
func (c *AdminSessionClient) Create() *AdminSessionCreate {
	mutation := newAdminSessionMutation(c.config, OpCreate)
	return &AdminSessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminSession entities.
func (c *AdminSessionClient) CreateBulk(builders ...*AdminSessionCreate) *AdminSessionCreateBulk {
	return &AdminSessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminSession.
func (c *AdminSessionClient) Update() *AdminSessionUpdate {
	mutation := newAdminSessionMutation(c.config, OpUpdate)
	return &AdminSessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminSessionClient) UpdateOne(as *AdminSession) *AdminSessionUpdateOne {
	mutation := newAdminSessionMutation(c.config, OpUpdateOne, withAdminSession(as))
	return &AdminSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminSessionClient) UpdateOneID(id int) *AdminSessionUpdateOne {
	mutation := newAdminSessionMutation(c.config, OpUpdateOne, withAdminSessionID(id))
	return &AdminSessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminSession.
func (c *AdminSessionClient) Delete() *AdminSessionDelete {
	mutation := newAdminSessionMutation(c.config, OpDelete)
	return &AdminSessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AdminSessionClient) DeleteOne(as *AdminSession) *AdminSessionDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AdminSessionClient) DeleteOneID(id int) *AdminSessionDeleteOne {
	builder := c.Delete().Where(adminsession.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminSessionDeleteOne{builder}
}

// Query returns a query builder for AdminSession.
func (c *AdminSessionClient) Query() *AdminSessionQuery {
	return &AdminSessionQuery{
		config: c.config,
	}
}

// Get returns a AdminSession entity by its id.
func (c *AdminSessionClient) Get(ctx context.Context, id int) (*AdminSession, error) {
	return c.Query().Where(adminsession.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminSessionClient) GetX(ctx context.Context, id int) *AdminSession {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a AdminSession.
func (c *AdminSessionClient) QueryUser(as *AdminSession) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(adminsession.Table, adminsession.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminsession.UserTable, adminsession.UserColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdminSessionClient) Hooks() []Hook {
	return c.hooks.AdminSession
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPosts queries the posts edge of a Category.
func (c *CategoryClient) QueryPosts(ca *Category) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.PostsTable, category.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUnsavedPosts queries the unsaved_posts edge of a Category.
func (c *CategoryClient) QueryUnsavedPosts(ca *Category) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.UnsavedPostsTable, category.UnsavedPostsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `post.Hooks(f(g(h())))`.
func (c *PostClient) Use(hooks ...Hook) {
	c.hooks.Post = append(c.hooks.Post, hooks...)
}

// Create returns a create builder for Post.
func (c *PostClient) Create() *PostCreate {
	mutation := newPostMutation(c.config, OpCreate)
	return &PostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Post entities.
func (c *PostClient) CreateBulk(builders ...*PostCreate) *PostCreateBulk {
	return &PostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	mutation := newPostMutation(c.config, OpUpdate)
	return &PostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPost(po))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id int) *PostUpdateOne {
	mutation := newPostMutation(c.config, OpUpdateOne, withPostID(id))
	return &PostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	mutation := newPostMutation(c.config, OpDelete)
	return &PostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostClient) DeleteOneID(id int) *PostDeleteOne {
	builder := c.Delete().Where(post.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostDeleteOne{builder}
}

// Query returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{
		config: c.config,
	}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id int) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id int) *Post {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Post.
func (c *PostClient) QueryAuthor(po *Post) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.AuthorTable, post.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a Post.
func (c *PostClient) QueryCategory(po *Post) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, post.CategoryTable, post.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThumbnail queries the thumbnail edge of a Post.
func (c *PostClient) QueryThumbnail(po *Post) *PostThumbnailQuery {
	query := &PostThumbnailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postthumbnail.Table, postthumbnail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, post.ThumbnailTable, post.ThumbnailColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a Post.
func (c *PostClient) QueryImages(po *Post) *PostImageQuery {
	query := &PostImageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postimage.Table, postimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.ImagesTable, post.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideos queries the videos edge of a Post.
func (c *PostClient) QueryVideos(po *Post) *PostVideoQuery {
	query := &PostVideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postvideo.Table, postvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.VideosTable, post.VideosColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachments queries the attachments edge of a Post.
func (c *PostClient) QueryAttachments(po *Post) *PostAttachmentQuery {
	query := &PostAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(post.Table, post.FieldID, id),
			sqlgraph.To(postattachment.Table, postattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, post.AttachmentsTable, post.AttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostClient) Hooks() []Hook {
	return c.hooks.Post
}

// PostAttachmentClient is a client for the PostAttachment schema.
type PostAttachmentClient struct {
	config
}

// NewPostAttachmentClient returns a client for the PostAttachment from the given config.
func NewPostAttachmentClient(c config) *PostAttachmentClient {
	return &PostAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postattachment.Hooks(f(g(h())))`.
func (c *PostAttachmentClient) Use(hooks ...Hook) {
	c.hooks.PostAttachment = append(c.hooks.PostAttachment, hooks...)
}

// Create returns a create builder for PostAttachment.
func (c *PostAttachmentClient) Create() *PostAttachmentCreate {
	mutation := newPostAttachmentMutation(c.config, OpCreate)
	return &PostAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostAttachment entities.
func (c *PostAttachmentClient) CreateBulk(builders ...*PostAttachmentCreate) *PostAttachmentCreateBulk {
	return &PostAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostAttachment.
func (c *PostAttachmentClient) Update() *PostAttachmentUpdate {
	mutation := newPostAttachmentMutation(c.config, OpUpdate)
	return &PostAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostAttachmentClient) UpdateOne(pa *PostAttachment) *PostAttachmentUpdateOne {
	mutation := newPostAttachmentMutation(c.config, OpUpdateOne, withPostAttachment(pa))
	return &PostAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostAttachmentClient) UpdateOneID(id int) *PostAttachmentUpdateOne {
	mutation := newPostAttachmentMutation(c.config, OpUpdateOne, withPostAttachmentID(id))
	return &PostAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostAttachment.
func (c *PostAttachmentClient) Delete() *PostAttachmentDelete {
	mutation := newPostAttachmentMutation(c.config, OpDelete)
	return &PostAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostAttachmentClient) DeleteOne(pa *PostAttachment) *PostAttachmentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostAttachmentClient) DeleteOneID(id int) *PostAttachmentDeleteOne {
	builder := c.Delete().Where(postattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostAttachmentDeleteOne{builder}
}

// Query returns a query builder for PostAttachment.
func (c *PostAttachmentClient) Query() *PostAttachmentQuery {
	return &PostAttachmentQuery{
		config: c.config,
	}
}

// Get returns a PostAttachment entity by its id.
func (c *PostAttachmentClient) Get(ctx context.Context, id int) (*PostAttachment, error) {
	return c.Query().Where(postattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostAttachmentClient) GetX(ctx context.Context, id int) *PostAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a PostAttachment.
func (c *PostAttachmentClient) QueryPost(pa *PostAttachment) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postattachment.Table, postattachment.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, postattachment.PostTable, postattachment.PostColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostAttachmentClient) Hooks() []Hook {
	return c.hooks.PostAttachment
}

// PostImageClient is a client for the PostImage schema.
type PostImageClient struct {
	config
}

// NewPostImageClient returns a client for the PostImage from the given config.
func NewPostImageClient(c config) *PostImageClient {
	return &PostImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postimage.Hooks(f(g(h())))`.
func (c *PostImageClient) Use(hooks ...Hook) {
	c.hooks.PostImage = append(c.hooks.PostImage, hooks...)
}

// Create returns a create builder for PostImage.
func (c *PostImageClient) Create() *PostImageCreate {
	mutation := newPostImageMutation(c.config, OpCreate)
	return &PostImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostImage entities.
func (c *PostImageClient) CreateBulk(builders ...*PostImageCreate) *PostImageCreateBulk {
	return &PostImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostImage.
func (c *PostImageClient) Update() *PostImageUpdate {
	mutation := newPostImageMutation(c.config, OpUpdate)
	return &PostImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostImageClient) UpdateOne(pi *PostImage) *PostImageUpdateOne {
	mutation := newPostImageMutation(c.config, OpUpdateOne, withPostImage(pi))
	return &PostImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostImageClient) UpdateOneID(id int) *PostImageUpdateOne {
	mutation := newPostImageMutation(c.config, OpUpdateOne, withPostImageID(id))
	return &PostImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostImage.
func (c *PostImageClient) Delete() *PostImageDelete {
	mutation := newPostImageMutation(c.config, OpDelete)
	return &PostImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostImageClient) DeleteOne(pi *PostImage) *PostImageDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostImageClient) DeleteOneID(id int) *PostImageDeleteOne {
	builder := c.Delete().Where(postimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostImageDeleteOne{builder}
}

// Query returns a query builder for PostImage.
func (c *PostImageClient) Query() *PostImageQuery {
	return &PostImageQuery{
		config: c.config,
	}
}

// Get returns a PostImage entity by its id.
func (c *PostImageClient) Get(ctx context.Context, id int) (*PostImage, error) {
	return c.Query().Where(postimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostImageClient) GetX(ctx context.Context, id int) *PostImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a PostImage.
func (c *PostImageClient) QueryPost(pi *PostImage) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postimage.Table, postimage.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, postimage.PostTable, postimage.PostColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostImageClient) Hooks() []Hook {
	return c.hooks.PostImage
}

// PostThumbnailClient is a client for the PostThumbnail schema.
type PostThumbnailClient struct {
	config
}

// NewPostThumbnailClient returns a client for the PostThumbnail from the given config.
func NewPostThumbnailClient(c config) *PostThumbnailClient {
	return &PostThumbnailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postthumbnail.Hooks(f(g(h())))`.
func (c *PostThumbnailClient) Use(hooks ...Hook) {
	c.hooks.PostThumbnail = append(c.hooks.PostThumbnail, hooks...)
}

// Create returns a create builder for PostThumbnail.
func (c *PostThumbnailClient) Create() *PostThumbnailCreate {
	mutation := newPostThumbnailMutation(c.config, OpCreate)
	return &PostThumbnailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostThumbnail entities.
func (c *PostThumbnailClient) CreateBulk(builders ...*PostThumbnailCreate) *PostThumbnailCreateBulk {
	return &PostThumbnailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostThumbnail.
func (c *PostThumbnailClient) Update() *PostThumbnailUpdate {
	mutation := newPostThumbnailMutation(c.config, OpUpdate)
	return &PostThumbnailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostThumbnailClient) UpdateOne(pt *PostThumbnail) *PostThumbnailUpdateOne {
	mutation := newPostThumbnailMutation(c.config, OpUpdateOne, withPostThumbnail(pt))
	return &PostThumbnailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostThumbnailClient) UpdateOneID(id int) *PostThumbnailUpdateOne {
	mutation := newPostThumbnailMutation(c.config, OpUpdateOne, withPostThumbnailID(id))
	return &PostThumbnailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostThumbnail.
func (c *PostThumbnailClient) Delete() *PostThumbnailDelete {
	mutation := newPostThumbnailMutation(c.config, OpDelete)
	return &PostThumbnailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostThumbnailClient) DeleteOne(pt *PostThumbnail) *PostThumbnailDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostThumbnailClient) DeleteOneID(id int) *PostThumbnailDeleteOne {
	builder := c.Delete().Where(postthumbnail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostThumbnailDeleteOne{builder}
}

// Query returns a query builder for PostThumbnail.
func (c *PostThumbnailClient) Query() *PostThumbnailQuery {
	return &PostThumbnailQuery{
		config: c.config,
	}
}

// Get returns a PostThumbnail entity by its id.
func (c *PostThumbnailClient) Get(ctx context.Context, id int) (*PostThumbnail, error) {
	return c.Query().Where(postthumbnail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostThumbnailClient) GetX(ctx context.Context, id int) *PostThumbnail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a PostThumbnail.
func (c *PostThumbnailClient) QueryPost(pt *PostThumbnail) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postthumbnail.Table, postthumbnail.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, postthumbnail.PostTable, postthumbnail.PostColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostThumbnailClient) Hooks() []Hook {
	return c.hooks.PostThumbnail
}

// PostVideoClient is a client for the PostVideo schema.
type PostVideoClient struct {
	config
}

// NewPostVideoClient returns a client for the PostVideo from the given config.
func NewPostVideoClient(c config) *PostVideoClient {
	return &PostVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `postvideo.Hooks(f(g(h())))`.
func (c *PostVideoClient) Use(hooks ...Hook) {
	c.hooks.PostVideo = append(c.hooks.PostVideo, hooks...)
}

// Create returns a create builder for PostVideo.
func (c *PostVideoClient) Create() *PostVideoCreate {
	mutation := newPostVideoMutation(c.config, OpCreate)
	return &PostVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PostVideo entities.
func (c *PostVideoClient) CreateBulk(builders ...*PostVideoCreate) *PostVideoCreateBulk {
	return &PostVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PostVideo.
func (c *PostVideoClient) Update() *PostVideoUpdate {
	mutation := newPostVideoMutation(c.config, OpUpdate)
	return &PostVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostVideoClient) UpdateOne(pv *PostVideo) *PostVideoUpdateOne {
	mutation := newPostVideoMutation(c.config, OpUpdateOne, withPostVideo(pv))
	return &PostVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PostVideoClient) UpdateOneID(id int) *PostVideoUpdateOne {
	mutation := newPostVideoMutation(c.config, OpUpdateOne, withPostVideoID(id))
	return &PostVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PostVideo.
func (c *PostVideoClient) Delete() *PostVideoDelete {
	mutation := newPostVideoMutation(c.config, OpDelete)
	return &PostVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostVideoClient) DeleteOne(pv *PostVideo) *PostVideoDeleteOne {
	return c.DeleteOneID(pv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostVideoClient) DeleteOneID(id int) *PostVideoDeleteOne {
	builder := c.Delete().Where(postvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PostVideoDeleteOne{builder}
}

// Query returns a query builder for PostVideo.
func (c *PostVideoClient) Query() *PostVideoQuery {
	return &PostVideoQuery{
		config: c.config,
	}
}

// Get returns a PostVideo entity by its id.
func (c *PostVideoClient) Get(ctx context.Context, id int) (*PostVideo, error) {
	return c.Query().Where(postvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostVideoClient) GetX(ctx context.Context, id int) *PostVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a PostVideo.
func (c *PostVideoClient) QueryPost(pv *PostVideo) *PostQuery {
	query := &PostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(postvideo.Table, postvideo.FieldID, id),
			sqlgraph.To(post.Table, post.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, postvideo.PostTable, postvideo.PostColumn),
		)
		fromV = sqlgraph.Neighbors(pv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PostVideoClient) Hooks() []Hook {
	return c.hooks.PostVideo
}

// RobotAccessClient is a client for the RobotAccess schema.
type RobotAccessClient struct {
	config
}

// NewRobotAccessClient returns a client for the RobotAccess from the given config.
func NewRobotAccessClient(c config) *RobotAccessClient {
	return &RobotAccessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `robotaccess.Hooks(f(g(h())))`.
func (c *RobotAccessClient) Use(hooks ...Hook) {
	c.hooks.RobotAccess = append(c.hooks.RobotAccess, hooks...)
}

// Create returns a create builder for RobotAccess.
func (c *RobotAccessClient) Create() *RobotAccessCreate {
	mutation := newRobotAccessMutation(c.config, OpCreate)
	return &RobotAccessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RobotAccess entities.
func (c *RobotAccessClient) CreateBulk(builders ...*RobotAccessCreate) *RobotAccessCreateBulk {
	return &RobotAccessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RobotAccess.
func (c *RobotAccessClient) Update() *RobotAccessUpdate {
	mutation := newRobotAccessMutation(c.config, OpUpdate)
	return &RobotAccessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RobotAccessClient) UpdateOne(ra *RobotAccess) *RobotAccessUpdateOne {
	mutation := newRobotAccessMutation(c.config, OpUpdateOne, withRobotAccess(ra))
	return &RobotAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RobotAccessClient) UpdateOneID(id int) *RobotAccessUpdateOne {
	mutation := newRobotAccessMutation(c.config, OpUpdateOne, withRobotAccessID(id))
	return &RobotAccessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RobotAccess.
func (c *RobotAccessClient) Delete() *RobotAccessDelete {
	mutation := newRobotAccessMutation(c.config, OpDelete)
	return &RobotAccessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RobotAccessClient) DeleteOne(ra *RobotAccess) *RobotAccessDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RobotAccessClient) DeleteOneID(id int) *RobotAccessDeleteOne {
	builder := c.Delete().Where(robotaccess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RobotAccessDeleteOne{builder}
}

// Query returns a query builder for RobotAccess.
func (c *RobotAccessClient) Query() *RobotAccessQuery {
	return &RobotAccessQuery{
		config: c.config,
	}
}

// Get returns a RobotAccess entity by its id.
func (c *RobotAccessClient) Get(ctx context.Context, id int) (*RobotAccess, error) {
	return c.Query().Where(robotaccess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RobotAccessClient) GetX(ctx context.Context, id int) *RobotAccess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a RobotAccess.
func (c *RobotAccessClient) QueryUser(ra *RobotAccess) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(robotaccess.Table, robotaccess.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, robotaccess.UserTable, robotaccess.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RobotAccessClient) Hooks() []Hook {
	return c.hooks.RobotAccess
}

// UnsavedPostClient is a client for the UnsavedPost schema.
type UnsavedPostClient struct {
	config
}

// NewUnsavedPostClient returns a client for the UnsavedPost from the given config.
func NewUnsavedPostClient(c config) *UnsavedPostClient {
	return &UnsavedPostClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unsavedpost.Hooks(f(g(h())))`.
func (c *UnsavedPostClient) Use(hooks ...Hook) {
	c.hooks.UnsavedPost = append(c.hooks.UnsavedPost, hooks...)
}

// Create returns a create builder for UnsavedPost.
func (c *UnsavedPostClient) Create() *UnsavedPostCreate {
	mutation := newUnsavedPostMutation(c.config, OpCreate)
	return &UnsavedPostCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnsavedPost entities.
func (c *UnsavedPostClient) CreateBulk(builders ...*UnsavedPostCreate) *UnsavedPostCreateBulk {
	return &UnsavedPostCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnsavedPost.
func (c *UnsavedPostClient) Update() *UnsavedPostUpdate {
	mutation := newUnsavedPostMutation(c.config, OpUpdate)
	return &UnsavedPostUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnsavedPostClient) UpdateOne(up *UnsavedPost) *UnsavedPostUpdateOne {
	mutation := newUnsavedPostMutation(c.config, OpUpdateOne, withUnsavedPost(up))
	return &UnsavedPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnsavedPostClient) UpdateOneID(id int) *UnsavedPostUpdateOne {
	mutation := newUnsavedPostMutation(c.config, OpUpdateOne, withUnsavedPostID(id))
	return &UnsavedPostUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnsavedPost.
func (c *UnsavedPostClient) Delete() *UnsavedPostDelete {
	mutation := newUnsavedPostMutation(c.config, OpDelete)
	return &UnsavedPostDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnsavedPostClient) DeleteOne(up *UnsavedPost) *UnsavedPostDeleteOne {
	return c.DeleteOneID(up.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnsavedPostClient) DeleteOneID(id int) *UnsavedPostDeleteOne {
	builder := c.Delete().Where(unsavedpost.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnsavedPostDeleteOne{builder}
}

// Query returns a query builder for UnsavedPost.
func (c *UnsavedPostClient) Query() *UnsavedPostQuery {
	return &UnsavedPostQuery{
		config: c.config,
	}
}

// Get returns a UnsavedPost entity by its id.
func (c *UnsavedPostClient) Get(ctx context.Context, id int) (*UnsavedPost, error) {
	return c.Query().Where(unsavedpost.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnsavedPostClient) GetX(ctx context.Context, id int) *UnsavedPost {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryAuthor(up *UnsavedPost) *AdminQuery {
	query := &AdminQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpost.AuthorTable, unsavedpost.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategory queries the category edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryCategory(up *UnsavedPost) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpost.CategoryTable, unsavedpost.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryThumbnail queries the thumbnail edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryThumbnail(up *UnsavedPost) *UnsavedPostThumbnailQuery {
	query := &UnsavedPostThumbnailQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(unsavedpostthumbnail.Table, unsavedpostthumbnail.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, unsavedpost.ThumbnailTable, unsavedpost.ThumbnailColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryImages queries the images edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryImages(up *UnsavedPost) *UnsavedPostImageQuery {
	query := &UnsavedPostImageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(unsavedpostimage.Table, unsavedpostimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.ImagesTable, unsavedpost.ImagesColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVideos queries the videos edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryVideos(up *UnsavedPost) *UnsavedPostVideoQuery {
	query := &UnsavedPostVideoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(unsavedpostvideo.Table, unsavedpostvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.VideosTable, unsavedpost.VideosColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachments queries the attachments edge of a UnsavedPost.
func (c *UnsavedPostClient) QueryAttachments(up *UnsavedPost) *UnsavedPostAttachmentQuery {
	query := &UnsavedPostAttachmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := up.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpost.Table, unsavedpost.FieldID, id),
			sqlgraph.To(unsavedpostattachment.Table, unsavedpostattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, unsavedpost.AttachmentsTable, unsavedpost.AttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(up.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnsavedPostClient) Hooks() []Hook {
	return c.hooks.UnsavedPost
}

// UnsavedPostAttachmentClient is a client for the UnsavedPostAttachment schema.
type UnsavedPostAttachmentClient struct {
	config
}

// NewUnsavedPostAttachmentClient returns a client for the UnsavedPostAttachment from the given config.
func NewUnsavedPostAttachmentClient(c config) *UnsavedPostAttachmentClient {
	return &UnsavedPostAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unsavedpostattachment.Hooks(f(g(h())))`.
func (c *UnsavedPostAttachmentClient) Use(hooks ...Hook) {
	c.hooks.UnsavedPostAttachment = append(c.hooks.UnsavedPostAttachment, hooks...)
}

// Create returns a create builder for UnsavedPostAttachment.
func (c *UnsavedPostAttachmentClient) Create() *UnsavedPostAttachmentCreate {
	mutation := newUnsavedPostAttachmentMutation(c.config, OpCreate)
	return &UnsavedPostAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnsavedPostAttachment entities.
func (c *UnsavedPostAttachmentClient) CreateBulk(builders ...*UnsavedPostAttachmentCreate) *UnsavedPostAttachmentCreateBulk {
	return &UnsavedPostAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnsavedPostAttachment.
func (c *UnsavedPostAttachmentClient) Update() *UnsavedPostAttachmentUpdate {
	mutation := newUnsavedPostAttachmentMutation(c.config, OpUpdate)
	return &UnsavedPostAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnsavedPostAttachmentClient) UpdateOne(upa *UnsavedPostAttachment) *UnsavedPostAttachmentUpdateOne {
	mutation := newUnsavedPostAttachmentMutation(c.config, OpUpdateOne, withUnsavedPostAttachment(upa))
	return &UnsavedPostAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnsavedPostAttachmentClient) UpdateOneID(id int) *UnsavedPostAttachmentUpdateOne {
	mutation := newUnsavedPostAttachmentMutation(c.config, OpUpdateOne, withUnsavedPostAttachmentID(id))
	return &UnsavedPostAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnsavedPostAttachment.
func (c *UnsavedPostAttachmentClient) Delete() *UnsavedPostAttachmentDelete {
	mutation := newUnsavedPostAttachmentMutation(c.config, OpDelete)
	return &UnsavedPostAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnsavedPostAttachmentClient) DeleteOne(upa *UnsavedPostAttachment) *UnsavedPostAttachmentDeleteOne {
	return c.DeleteOneID(upa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnsavedPostAttachmentClient) DeleteOneID(id int) *UnsavedPostAttachmentDeleteOne {
	builder := c.Delete().Where(unsavedpostattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnsavedPostAttachmentDeleteOne{builder}
}

// Query returns a query builder for UnsavedPostAttachment.
func (c *UnsavedPostAttachmentClient) Query() *UnsavedPostAttachmentQuery {
	return &UnsavedPostAttachmentQuery{
		config: c.config,
	}
}

// Get returns a UnsavedPostAttachment entity by its id.
func (c *UnsavedPostAttachmentClient) Get(ctx context.Context, id int) (*UnsavedPostAttachment, error) {
	return c.Query().Where(unsavedpostattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnsavedPostAttachmentClient) GetX(ctx context.Context, id int) *UnsavedPostAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnsavedPost queries the unsaved_post edge of a UnsavedPostAttachment.
func (c *UnsavedPostAttachmentClient) QueryUnsavedPost(upa *UnsavedPostAttachment) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpostattachment.Table, unsavedpostattachment.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpostattachment.UnsavedPostTable, unsavedpostattachment.UnsavedPostColumn),
		)
		fromV = sqlgraph.Neighbors(upa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnsavedPostAttachmentClient) Hooks() []Hook {
	return c.hooks.UnsavedPostAttachment
}

// UnsavedPostImageClient is a client for the UnsavedPostImage schema.
type UnsavedPostImageClient struct {
	config
}

// NewUnsavedPostImageClient returns a client for the UnsavedPostImage from the given config.
func NewUnsavedPostImageClient(c config) *UnsavedPostImageClient {
	return &UnsavedPostImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unsavedpostimage.Hooks(f(g(h())))`.
func (c *UnsavedPostImageClient) Use(hooks ...Hook) {
	c.hooks.UnsavedPostImage = append(c.hooks.UnsavedPostImage, hooks...)
}

// Create returns a create builder for UnsavedPostImage.
func (c *UnsavedPostImageClient) Create() *UnsavedPostImageCreate {
	mutation := newUnsavedPostImageMutation(c.config, OpCreate)
	return &UnsavedPostImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnsavedPostImage entities.
func (c *UnsavedPostImageClient) CreateBulk(builders ...*UnsavedPostImageCreate) *UnsavedPostImageCreateBulk {
	return &UnsavedPostImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnsavedPostImage.
func (c *UnsavedPostImageClient) Update() *UnsavedPostImageUpdate {
	mutation := newUnsavedPostImageMutation(c.config, OpUpdate)
	return &UnsavedPostImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnsavedPostImageClient) UpdateOne(upi *UnsavedPostImage) *UnsavedPostImageUpdateOne {
	mutation := newUnsavedPostImageMutation(c.config, OpUpdateOne, withUnsavedPostImage(upi))
	return &UnsavedPostImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnsavedPostImageClient) UpdateOneID(id int) *UnsavedPostImageUpdateOne {
	mutation := newUnsavedPostImageMutation(c.config, OpUpdateOne, withUnsavedPostImageID(id))
	return &UnsavedPostImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnsavedPostImage.
func (c *UnsavedPostImageClient) Delete() *UnsavedPostImageDelete {
	mutation := newUnsavedPostImageMutation(c.config, OpDelete)
	return &UnsavedPostImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnsavedPostImageClient) DeleteOne(upi *UnsavedPostImage) *UnsavedPostImageDeleteOne {
	return c.DeleteOneID(upi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnsavedPostImageClient) DeleteOneID(id int) *UnsavedPostImageDeleteOne {
	builder := c.Delete().Where(unsavedpostimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnsavedPostImageDeleteOne{builder}
}

// Query returns a query builder for UnsavedPostImage.
func (c *UnsavedPostImageClient) Query() *UnsavedPostImageQuery {
	return &UnsavedPostImageQuery{
		config: c.config,
	}
}

// Get returns a UnsavedPostImage entity by its id.
func (c *UnsavedPostImageClient) Get(ctx context.Context, id int) (*UnsavedPostImage, error) {
	return c.Query().Where(unsavedpostimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnsavedPostImageClient) GetX(ctx context.Context, id int) *UnsavedPostImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnsavedPost queries the unsaved_post edge of a UnsavedPostImage.
func (c *UnsavedPostImageClient) QueryUnsavedPost(upi *UnsavedPostImage) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpostimage.Table, unsavedpostimage.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpostimage.UnsavedPostTable, unsavedpostimage.UnsavedPostColumn),
		)
		fromV = sqlgraph.Neighbors(upi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnsavedPostImageClient) Hooks() []Hook {
	return c.hooks.UnsavedPostImage
}

// UnsavedPostThumbnailClient is a client for the UnsavedPostThumbnail schema.
type UnsavedPostThumbnailClient struct {
	config
}

// NewUnsavedPostThumbnailClient returns a client for the UnsavedPostThumbnail from the given config.
func NewUnsavedPostThumbnailClient(c config) *UnsavedPostThumbnailClient {
	return &UnsavedPostThumbnailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unsavedpostthumbnail.Hooks(f(g(h())))`.
func (c *UnsavedPostThumbnailClient) Use(hooks ...Hook) {
	c.hooks.UnsavedPostThumbnail = append(c.hooks.UnsavedPostThumbnail, hooks...)
}

// Create returns a create builder for UnsavedPostThumbnail.
func (c *UnsavedPostThumbnailClient) Create() *UnsavedPostThumbnailCreate {
	mutation := newUnsavedPostThumbnailMutation(c.config, OpCreate)
	return &UnsavedPostThumbnailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnsavedPostThumbnail entities.
func (c *UnsavedPostThumbnailClient) CreateBulk(builders ...*UnsavedPostThumbnailCreate) *UnsavedPostThumbnailCreateBulk {
	return &UnsavedPostThumbnailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnsavedPostThumbnail.
func (c *UnsavedPostThumbnailClient) Update() *UnsavedPostThumbnailUpdate {
	mutation := newUnsavedPostThumbnailMutation(c.config, OpUpdate)
	return &UnsavedPostThumbnailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnsavedPostThumbnailClient) UpdateOne(upt *UnsavedPostThumbnail) *UnsavedPostThumbnailUpdateOne {
	mutation := newUnsavedPostThumbnailMutation(c.config, OpUpdateOne, withUnsavedPostThumbnail(upt))
	return &UnsavedPostThumbnailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnsavedPostThumbnailClient) UpdateOneID(id int) *UnsavedPostThumbnailUpdateOne {
	mutation := newUnsavedPostThumbnailMutation(c.config, OpUpdateOne, withUnsavedPostThumbnailID(id))
	return &UnsavedPostThumbnailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnsavedPostThumbnail.
func (c *UnsavedPostThumbnailClient) Delete() *UnsavedPostThumbnailDelete {
	mutation := newUnsavedPostThumbnailMutation(c.config, OpDelete)
	return &UnsavedPostThumbnailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnsavedPostThumbnailClient) DeleteOne(upt *UnsavedPostThumbnail) *UnsavedPostThumbnailDeleteOne {
	return c.DeleteOneID(upt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnsavedPostThumbnailClient) DeleteOneID(id int) *UnsavedPostThumbnailDeleteOne {
	builder := c.Delete().Where(unsavedpostthumbnail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnsavedPostThumbnailDeleteOne{builder}
}

// Query returns a query builder for UnsavedPostThumbnail.
func (c *UnsavedPostThumbnailClient) Query() *UnsavedPostThumbnailQuery {
	return &UnsavedPostThumbnailQuery{
		config: c.config,
	}
}

// Get returns a UnsavedPostThumbnail entity by its id.
func (c *UnsavedPostThumbnailClient) Get(ctx context.Context, id int) (*UnsavedPostThumbnail, error) {
	return c.Query().Where(unsavedpostthumbnail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnsavedPostThumbnailClient) GetX(ctx context.Context, id int) *UnsavedPostThumbnail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnsavedPost queries the unsaved_post edge of a UnsavedPostThumbnail.
func (c *UnsavedPostThumbnailClient) QueryUnsavedPost(upt *UnsavedPostThumbnail) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpostthumbnail.Table, unsavedpostthumbnail.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, unsavedpostthumbnail.UnsavedPostTable, unsavedpostthumbnail.UnsavedPostColumn),
		)
		fromV = sqlgraph.Neighbors(upt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnsavedPostThumbnailClient) Hooks() []Hook {
	return c.hooks.UnsavedPostThumbnail
}

// UnsavedPostVideoClient is a client for the UnsavedPostVideo schema.
type UnsavedPostVideoClient struct {
	config
}

// NewUnsavedPostVideoClient returns a client for the UnsavedPostVideo from the given config.
func NewUnsavedPostVideoClient(c config) *UnsavedPostVideoClient {
	return &UnsavedPostVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `unsavedpostvideo.Hooks(f(g(h())))`.
func (c *UnsavedPostVideoClient) Use(hooks ...Hook) {
	c.hooks.UnsavedPostVideo = append(c.hooks.UnsavedPostVideo, hooks...)
}

// Create returns a create builder for UnsavedPostVideo.
func (c *UnsavedPostVideoClient) Create() *UnsavedPostVideoCreate {
	mutation := newUnsavedPostVideoMutation(c.config, OpCreate)
	return &UnsavedPostVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UnsavedPostVideo entities.
func (c *UnsavedPostVideoClient) CreateBulk(builders ...*UnsavedPostVideoCreate) *UnsavedPostVideoCreateBulk {
	return &UnsavedPostVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UnsavedPostVideo.
func (c *UnsavedPostVideoClient) Update() *UnsavedPostVideoUpdate {
	mutation := newUnsavedPostVideoMutation(c.config, OpUpdate)
	return &UnsavedPostVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UnsavedPostVideoClient) UpdateOne(upv *UnsavedPostVideo) *UnsavedPostVideoUpdateOne {
	mutation := newUnsavedPostVideoMutation(c.config, OpUpdateOne, withUnsavedPostVideo(upv))
	return &UnsavedPostVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UnsavedPostVideoClient) UpdateOneID(id int) *UnsavedPostVideoUpdateOne {
	mutation := newUnsavedPostVideoMutation(c.config, OpUpdateOne, withUnsavedPostVideoID(id))
	return &UnsavedPostVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UnsavedPostVideo.
func (c *UnsavedPostVideoClient) Delete() *UnsavedPostVideoDelete {
	mutation := newUnsavedPostVideoMutation(c.config, OpDelete)
	return &UnsavedPostVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UnsavedPostVideoClient) DeleteOne(upv *UnsavedPostVideo) *UnsavedPostVideoDeleteOne {
	return c.DeleteOneID(upv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UnsavedPostVideoClient) DeleteOneID(id int) *UnsavedPostVideoDeleteOne {
	builder := c.Delete().Where(unsavedpostvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UnsavedPostVideoDeleteOne{builder}
}

// Query returns a query builder for UnsavedPostVideo.
func (c *UnsavedPostVideoClient) Query() *UnsavedPostVideoQuery {
	return &UnsavedPostVideoQuery{
		config: c.config,
	}
}

// Get returns a UnsavedPostVideo entity by its id.
func (c *UnsavedPostVideoClient) Get(ctx context.Context, id int) (*UnsavedPostVideo, error) {
	return c.Query().Where(unsavedpostvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UnsavedPostVideoClient) GetX(ctx context.Context, id int) *UnsavedPostVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUnsavedPost queries the unsaved_post edge of a UnsavedPostVideo.
func (c *UnsavedPostVideoClient) QueryUnsavedPost(upv *UnsavedPostVideo) *UnsavedPostQuery {
	query := &UnsavedPostQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := upv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(unsavedpostvideo.Table, unsavedpostvideo.FieldID, id),
			sqlgraph.To(unsavedpost.Table, unsavedpost.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, unsavedpostvideo.UnsavedPostTable, unsavedpostvideo.UnsavedPostColumn),
		)
		fromV = sqlgraph.Neighbors(upv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UnsavedPostVideoClient) Hooks() []Hook {
	return c.hooks.UnsavedPostVideo
}
