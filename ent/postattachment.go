// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/post"
	"devlog/ent/postattachment"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// PostAttachment is the model entity for the PostAttachment schema.
type PostAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Size holds the value of the "size" field.
	Size uint64 `json:"size,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Mime holds the value of the "mime" field.
	Mime string `json:"mime,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostAttachmentQuery when eager-loading is set.
	Edges            PostAttachmentEdges `json:"edges"`
	post_attachments *int
}

// PostAttachmentEdges holds the relations/edges for other nodes in the graph.
type PostAttachmentEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostAttachmentEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.Post == nil {
			// The edge post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostAttachment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case postattachment.FieldID, postattachment.FieldSize:
			values[i] = new(sql.NullInt64)
		case postattachment.FieldUUID, postattachment.FieldName, postattachment.FieldMime, postattachment.FieldURL:
			values[i] = new(sql.NullString)
		case postattachment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case postattachment.ForeignKeys[0]: // post_attachments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PostAttachment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostAttachment fields.
func (pa *PostAttachment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case postattachment.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				pa.UUID = value.String
			}
		case postattachment.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				pa.Size = uint64(value.Int64)
			}
		case postattachment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case postattachment.FieldMime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime", values[i])
			} else if value.Valid {
				pa.Mime = value.String
			}
		case postattachment.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				pa.URL = value.String
			}
		case postattachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case postattachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field post_attachments", value)
			} else if value.Valid {
				pa.post_attachments = new(int)
				*pa.post_attachments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPost queries the "post" edge of the PostAttachment entity.
func (pa *PostAttachment) QueryPost() *PostQuery {
	return (&PostAttachmentClient{config: pa.config}).QueryPost(pa)
}

// Update returns a builder for updating this PostAttachment.
// Note that you need to call PostAttachment.Unwrap() before calling this method if this PostAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PostAttachment) Update() *PostAttachmentUpdateOne {
	return (&PostAttachmentClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the PostAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PostAttachment) Unwrap() *PostAttachment {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostAttachment is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PostAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("PostAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(pa.UUID)
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", pa.Size))
	builder.WriteString(", name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", mime=")
	builder.WriteString(pa.Mime)
	builder.WriteString(", url=")
	builder.WriteString(pa.URL)
	builder.WriteString(", created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PostAttachments is a parsable slice of PostAttachment.
type PostAttachments []*PostAttachment

func (pa PostAttachments) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
