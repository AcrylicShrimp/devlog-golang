// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostattachment"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UnsavedPostAttachmentCreate is the builder for creating a UnsavedPostAttachment entity.
type UnsavedPostAttachmentCreate struct {
	config
	mutation *UnsavedPostAttachmentMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (upac *UnsavedPostAttachmentCreate) SetUUID(s string) *UnsavedPostAttachmentCreate {
	upac.mutation.SetUUID(s)
	return upac
}

// SetValidity sets the "validity" field.
func (upac *UnsavedPostAttachmentCreate) SetValidity(u unsavedpostattachment.Validity) *UnsavedPostAttachmentCreate {
	upac.mutation.SetValidity(u)
	return upac
}

// SetNillableValidity sets the "validity" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableValidity(u *unsavedpostattachment.Validity) *UnsavedPostAttachmentCreate {
	if u != nil {
		upac.SetValidity(*u)
	}
	return upac
}

// SetSize sets the "size" field.
func (upac *UnsavedPostAttachmentCreate) SetSize(u uint64) *UnsavedPostAttachmentCreate {
	upac.mutation.SetSize(u)
	return upac
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableSize(u *uint64) *UnsavedPostAttachmentCreate {
	if u != nil {
		upac.SetSize(*u)
	}
	return upac
}

// SetName sets the "name" field.
func (upac *UnsavedPostAttachmentCreate) SetName(s string) *UnsavedPostAttachmentCreate {
	upac.mutation.SetName(s)
	return upac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableName(s *string) *UnsavedPostAttachmentCreate {
	if s != nil {
		upac.SetName(*s)
	}
	return upac
}

// SetMime sets the "mime" field.
func (upac *UnsavedPostAttachmentCreate) SetMime(s string) *UnsavedPostAttachmentCreate {
	upac.mutation.SetMime(s)
	return upac
}

// SetNillableMime sets the "mime" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableMime(s *string) *UnsavedPostAttachmentCreate {
	if s != nil {
		upac.SetMime(*s)
	}
	return upac
}

// SetURL sets the "url" field.
func (upac *UnsavedPostAttachmentCreate) SetURL(s string) *UnsavedPostAttachmentCreate {
	upac.mutation.SetURL(s)
	return upac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableURL(s *string) *UnsavedPostAttachmentCreate {
	if s != nil {
		upac.SetURL(*s)
	}
	return upac
}

// SetCreatedAt sets the "created_at" field.
func (upac *UnsavedPostAttachmentCreate) SetCreatedAt(t time.Time) *UnsavedPostAttachmentCreate {
	upac.mutation.SetCreatedAt(t)
	return upac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upac *UnsavedPostAttachmentCreate) SetNillableCreatedAt(t *time.Time) *UnsavedPostAttachmentCreate {
	if t != nil {
		upac.SetCreatedAt(*t)
	}
	return upac
}

// SetUnsavedPostID sets the "unsaved_post" edge to the UnsavedPost entity by ID.
func (upac *UnsavedPostAttachmentCreate) SetUnsavedPostID(id int) *UnsavedPostAttachmentCreate {
	upac.mutation.SetUnsavedPostID(id)
	return upac
}

// SetUnsavedPost sets the "unsaved_post" edge to the UnsavedPost entity.
func (upac *UnsavedPostAttachmentCreate) SetUnsavedPost(u *UnsavedPost) *UnsavedPostAttachmentCreate {
	return upac.SetUnsavedPostID(u.ID)
}

// Mutation returns the UnsavedPostAttachmentMutation object of the builder.
func (upac *UnsavedPostAttachmentCreate) Mutation() *UnsavedPostAttachmentMutation {
	return upac.mutation
}

// Save creates the UnsavedPostAttachment in the database.
func (upac *UnsavedPostAttachmentCreate) Save(ctx context.Context) (*UnsavedPostAttachment, error) {
	var (
		err  error
		node *UnsavedPostAttachment
	)
	upac.defaults()
	if len(upac.hooks) == 0 {
		if err = upac.check(); err != nil {
			return nil, err
		}
		node, err = upac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UnsavedPostAttachmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = upac.check(); err != nil {
				return nil, err
			}
			upac.mutation = mutation
			if node, err = upac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(upac.hooks) - 1; i >= 0; i-- {
			if upac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = upac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, upac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (upac *UnsavedPostAttachmentCreate) SaveX(ctx context.Context) *UnsavedPostAttachment {
	v, err := upac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upac *UnsavedPostAttachmentCreate) Exec(ctx context.Context) error {
	_, err := upac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upac *UnsavedPostAttachmentCreate) ExecX(ctx context.Context) {
	if err := upac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upac *UnsavedPostAttachmentCreate) defaults() {
	if _, ok := upac.mutation.Validity(); !ok {
		v := unsavedpostattachment.DefaultValidity
		upac.mutation.SetValidity(v)
	}
	if _, ok := upac.mutation.CreatedAt(); !ok {
		v := unsavedpostattachment.DefaultCreatedAt()
		upac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upac *UnsavedPostAttachmentCreate) check() error {
	if _, ok := upac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "uuid"`)}
	}
	if v, ok := upac.mutation.UUID(); ok {
		if err := unsavedpostattachment.UUIDValidator(v); err != nil {
			return &ValidationError{Name: "uuid", err: fmt.Errorf(`ent: validator failed for field "uuid": %w`, err)}
		}
	}
	if _, ok := upac.mutation.Validity(); !ok {
		return &ValidationError{Name: "validity", err: errors.New(`ent: missing required field "validity"`)}
	}
	if v, ok := upac.mutation.Validity(); ok {
		if err := unsavedpostattachment.ValidityValidator(v); err != nil {
			return &ValidationError{Name: "validity", err: fmt.Errorf(`ent: validator failed for field "validity": %w`, err)}
		}
	}
	if v, ok := upac.mutation.Name(); ok {
		if err := unsavedpostattachment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if v, ok := upac.mutation.Mime(); ok {
		if err := unsavedpostattachment.MimeValidator(v); err != nil {
			return &ValidationError{Name: "mime", err: fmt.Errorf(`ent: validator failed for field "mime": %w`, err)}
		}
	}
	if v, ok := upac.mutation.URL(); ok {
		if err := unsavedpostattachment.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "url": %w`, err)}
		}
	}
	if _, ok := upac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := upac.mutation.UnsavedPostID(); !ok {
		return &ValidationError{Name: "unsaved_post", err: errors.New("ent: missing required edge \"unsaved_post\"")}
	}
	return nil
}

func (upac *UnsavedPostAttachmentCreate) sqlSave(ctx context.Context) (*UnsavedPostAttachment, error) {
	_node, _spec := upac.createSpec()
	if err := sqlgraph.CreateNode(ctx, upac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (upac *UnsavedPostAttachmentCreate) createSpec() (*UnsavedPostAttachment, *sqlgraph.CreateSpec) {
	var (
		_node = &UnsavedPostAttachment{config: upac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: unsavedpostattachment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: unsavedpostattachment.FieldID,
			},
		}
	)
	if value, ok := upac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpostattachment.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := upac.mutation.Validity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: unsavedpostattachment.FieldValidity,
		})
		_node.Validity = value
	}
	if value, ok := upac.mutation.Size(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: unsavedpostattachment.FieldSize,
		})
		_node.Size = &value
	}
	if value, ok := upac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpostattachment.FieldName,
		})
		_node.Name = &value
	}
	if value, ok := upac.mutation.Mime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpostattachment.FieldMime,
		})
		_node.Mime = &value
	}
	if value, ok := upac.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: unsavedpostattachment.FieldURL,
		})
		_node.URL = &value
	}
	if value, ok := upac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: unsavedpostattachment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := upac.mutation.UnsavedPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   unsavedpostattachment.UnsavedPostTable,
			Columns: []string{unsavedpostattachment.UnsavedPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: unsavedpost.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.unsaved_post_attachments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UnsavedPostAttachmentCreateBulk is the builder for creating many UnsavedPostAttachment entities in bulk.
type UnsavedPostAttachmentCreateBulk struct {
	config
	builders []*UnsavedPostAttachmentCreate
}

// Save creates the UnsavedPostAttachment entities in the database.
func (upacb *UnsavedPostAttachmentCreateBulk) Save(ctx context.Context) ([]*UnsavedPostAttachment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(upacb.builders))
	nodes := make([]*UnsavedPostAttachment, len(upacb.builders))
	mutators := make([]Mutator, len(upacb.builders))
	for i := range upacb.builders {
		func(i int, root context.Context) {
			builder := upacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UnsavedPostAttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upacb *UnsavedPostAttachmentCreateBulk) SaveX(ctx context.Context) []*UnsavedPostAttachment {
	v, err := upacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upacb *UnsavedPostAttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := upacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upacb *UnsavedPostAttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := upacb.Exec(ctx); err != nil {
		panic(err)
	}
}
