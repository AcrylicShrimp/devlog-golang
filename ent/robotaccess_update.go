// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/predicate"
	"devlog/ent/robotaccess"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RobotAccessUpdate is the builder for updating RobotAccess entities.
type RobotAccessUpdate struct {
	config
	hooks    []Hook
	mutation *RobotAccessMutation
}

// Where appends a list predicates to the RobotAccessUpdate builder.
func (rau *RobotAccessUpdate) Where(ps ...predicate.RobotAccess) *RobotAccessUpdate {
	rau.mutation.Where(ps...)
	return rau
}

// SetToken sets the "token" field.
func (rau *RobotAccessUpdate) SetToken(s string) *RobotAccessUpdate {
	rau.mutation.SetToken(s)
	return rau
}

// SetMemo sets the "memo" field.
func (rau *RobotAccessUpdate) SetMemo(s string) *RobotAccessUpdate {
	rau.mutation.SetMemo(s)
	return rau
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (rau *RobotAccessUpdate) SetNillableMemo(s *string) *RobotAccessUpdate {
	if s != nil {
		rau.SetMemo(*s)
	}
	return rau
}

// ClearMemo clears the value of the "memo" field.
func (rau *RobotAccessUpdate) ClearMemo() *RobotAccessUpdate {
	rau.mutation.ClearMemo()
	return rau
}

// SetCreatedAt sets the "created_at" field.
func (rau *RobotAccessUpdate) SetCreatedAt(t time.Time) *RobotAccessUpdate {
	rau.mutation.SetCreatedAt(t)
	return rau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rau *RobotAccessUpdate) SetNillableCreatedAt(t *time.Time) *RobotAccessUpdate {
	if t != nil {
		rau.SetCreatedAt(*t)
	}
	return rau
}

// SetExpiresAt sets the "expires_at" field.
func (rau *RobotAccessUpdate) SetExpiresAt(t time.Time) *RobotAccessUpdate {
	rau.mutation.SetExpiresAt(t)
	return rau
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (rau *RobotAccessUpdate) SetNillableExpiresAt(t *time.Time) *RobotAccessUpdate {
	if t != nil {
		rau.SetExpiresAt(*t)
	}
	return rau
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (rau *RobotAccessUpdate) ClearExpiresAt() *RobotAccessUpdate {
	rau.mutation.ClearExpiresAt()
	return rau
}

// SetLastAccessAt sets the "last_access_at" field.
func (rau *RobotAccessUpdate) SetLastAccessAt(t time.Time) *RobotAccessUpdate {
	rau.mutation.SetLastAccessAt(t)
	return rau
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (rau *RobotAccessUpdate) SetNillableLastAccessAt(t *time.Time) *RobotAccessUpdate {
	if t != nil {
		rau.SetLastAccessAt(*t)
	}
	return rau
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (rau *RobotAccessUpdate) ClearLastAccessAt() *RobotAccessUpdate {
	rau.mutation.ClearLastAccessAt()
	return rau
}

// SetUserID sets the "user" edge to the Admin entity by ID.
func (rau *RobotAccessUpdate) SetUserID(id int) *RobotAccessUpdate {
	rau.mutation.SetUserID(id)
	return rau
}

// SetUser sets the "user" edge to the Admin entity.
func (rau *RobotAccessUpdate) SetUser(a *Admin) *RobotAccessUpdate {
	return rau.SetUserID(a.ID)
}

// Mutation returns the RobotAccessMutation object of the builder.
func (rau *RobotAccessUpdate) Mutation() *RobotAccessMutation {
	return rau.mutation
}

// ClearUser clears the "user" edge to the Admin entity.
func (rau *RobotAccessUpdate) ClearUser() *RobotAccessUpdate {
	rau.mutation.ClearUser()
	return rau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rau *RobotAccessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rau.hooks) == 0 {
		if err = rau.check(); err != nil {
			return 0, err
		}
		affected, err = rau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rau.check(); err != nil {
				return 0, err
			}
			rau.mutation = mutation
			affected, err = rau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rau.hooks) - 1; i >= 0; i-- {
			if rau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rau *RobotAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := rau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rau *RobotAccessUpdate) Exec(ctx context.Context) error {
	_, err := rau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rau *RobotAccessUpdate) ExecX(ctx context.Context) {
	if err := rau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rau *RobotAccessUpdate) check() error {
	if v, ok := rau.mutation.Token(); ok {
		if err := robotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	if v, ok := rau.mutation.Memo(); ok {
		if err := robotaccess.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf("ent: validator failed for field \"memo\": %w", err)}
		}
	}
	if _, ok := rau.mutation.UserID(); rau.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (rau *RobotAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   robotaccess.Table,
			Columns: robotaccess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: robotaccess.FieldID,
			},
		},
	}
	if ps := rau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rau.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldToken,
		})
	}
	if value, ok := rau.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldMemo,
		})
	}
	if rau.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: robotaccess.FieldMemo,
		})
	}
	if value, ok := rau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldCreatedAt,
		})
	}
	if value, ok := rau.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldExpiresAt,
		})
	}
	if rau.mutation.ExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: robotaccess.FieldExpiresAt,
		})
	}
	if value, ok := rau.mutation.LastAccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldLastAccessAt,
		})
	}
	if rau.mutation.LastAccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: robotaccess.FieldLastAccessAt,
		})
	}
	if rau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   robotaccess.UserTable,
			Columns: []string{robotaccess.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   robotaccess.UserTable,
			Columns: []string{robotaccess.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{robotaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RobotAccessUpdateOne is the builder for updating a single RobotAccess entity.
type RobotAccessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RobotAccessMutation
}

// SetToken sets the "token" field.
func (rauo *RobotAccessUpdateOne) SetToken(s string) *RobotAccessUpdateOne {
	rauo.mutation.SetToken(s)
	return rauo
}

// SetMemo sets the "memo" field.
func (rauo *RobotAccessUpdateOne) SetMemo(s string) *RobotAccessUpdateOne {
	rauo.mutation.SetMemo(s)
	return rauo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (rauo *RobotAccessUpdateOne) SetNillableMemo(s *string) *RobotAccessUpdateOne {
	if s != nil {
		rauo.SetMemo(*s)
	}
	return rauo
}

// ClearMemo clears the value of the "memo" field.
func (rauo *RobotAccessUpdateOne) ClearMemo() *RobotAccessUpdateOne {
	rauo.mutation.ClearMemo()
	return rauo
}

// SetCreatedAt sets the "created_at" field.
func (rauo *RobotAccessUpdateOne) SetCreatedAt(t time.Time) *RobotAccessUpdateOne {
	rauo.mutation.SetCreatedAt(t)
	return rauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rauo *RobotAccessUpdateOne) SetNillableCreatedAt(t *time.Time) *RobotAccessUpdateOne {
	if t != nil {
		rauo.SetCreatedAt(*t)
	}
	return rauo
}

// SetExpiresAt sets the "expires_at" field.
func (rauo *RobotAccessUpdateOne) SetExpiresAt(t time.Time) *RobotAccessUpdateOne {
	rauo.mutation.SetExpiresAt(t)
	return rauo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (rauo *RobotAccessUpdateOne) SetNillableExpiresAt(t *time.Time) *RobotAccessUpdateOne {
	if t != nil {
		rauo.SetExpiresAt(*t)
	}
	return rauo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (rauo *RobotAccessUpdateOne) ClearExpiresAt() *RobotAccessUpdateOne {
	rauo.mutation.ClearExpiresAt()
	return rauo
}

// SetLastAccessAt sets the "last_access_at" field.
func (rauo *RobotAccessUpdateOne) SetLastAccessAt(t time.Time) *RobotAccessUpdateOne {
	rauo.mutation.SetLastAccessAt(t)
	return rauo
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (rauo *RobotAccessUpdateOne) SetNillableLastAccessAt(t *time.Time) *RobotAccessUpdateOne {
	if t != nil {
		rauo.SetLastAccessAt(*t)
	}
	return rauo
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (rauo *RobotAccessUpdateOne) ClearLastAccessAt() *RobotAccessUpdateOne {
	rauo.mutation.ClearLastAccessAt()
	return rauo
}

// SetUserID sets the "user" edge to the Admin entity by ID.
func (rauo *RobotAccessUpdateOne) SetUserID(id int) *RobotAccessUpdateOne {
	rauo.mutation.SetUserID(id)
	return rauo
}

// SetUser sets the "user" edge to the Admin entity.
func (rauo *RobotAccessUpdateOne) SetUser(a *Admin) *RobotAccessUpdateOne {
	return rauo.SetUserID(a.ID)
}

// Mutation returns the RobotAccessMutation object of the builder.
func (rauo *RobotAccessUpdateOne) Mutation() *RobotAccessMutation {
	return rauo.mutation
}

// ClearUser clears the "user" edge to the Admin entity.
func (rauo *RobotAccessUpdateOne) ClearUser() *RobotAccessUpdateOne {
	rauo.mutation.ClearUser()
	return rauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rauo *RobotAccessUpdateOne) Select(field string, fields ...string) *RobotAccessUpdateOne {
	rauo.fields = append([]string{field}, fields...)
	return rauo
}

// Save executes the query and returns the updated RobotAccess entity.
func (rauo *RobotAccessUpdateOne) Save(ctx context.Context) (*RobotAccess, error) {
	var (
		err  error
		node *RobotAccess
	)
	if len(rauo.hooks) == 0 {
		if err = rauo.check(); err != nil {
			return nil, err
		}
		node, err = rauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rauo.check(); err != nil {
				return nil, err
			}
			rauo.mutation = mutation
			node, err = rauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rauo.hooks) - 1; i >= 0; i-- {
			if rauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rauo *RobotAccessUpdateOne) SaveX(ctx context.Context) *RobotAccess {
	node, err := rauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rauo *RobotAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := rauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rauo *RobotAccessUpdateOne) ExecX(ctx context.Context) {
	if err := rauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rauo *RobotAccessUpdateOne) check() error {
	if v, ok := rauo.mutation.Token(); ok {
		if err := robotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	if v, ok := rauo.mutation.Memo(); ok {
		if err := robotaccess.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf("ent: validator failed for field \"memo\": %w", err)}
		}
	}
	if _, ok := rauo.mutation.UserID(); rauo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (rauo *RobotAccessUpdateOne) sqlSave(ctx context.Context) (_node *RobotAccess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   robotaccess.Table,
			Columns: robotaccess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: robotaccess.FieldID,
			},
		},
	}
	id, ok := rauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RobotAccess.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, robotaccess.FieldID)
		for _, f := range fields {
			if !robotaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != robotaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rauo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldToken,
		})
	}
	if value, ok := rauo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: robotaccess.FieldMemo,
		})
	}
	if rauo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: robotaccess.FieldMemo,
		})
	}
	if value, ok := rauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldCreatedAt,
		})
	}
	if value, ok := rauo.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldExpiresAt,
		})
	}
	if rauo.mutation.ExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: robotaccess.FieldExpiresAt,
		})
	}
	if value, ok := rauo.mutation.LastAccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: robotaccess.FieldLastAccessAt,
		})
	}
	if rauo.mutation.LastAccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: robotaccess.FieldLastAccessAt,
		})
	}
	if rauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   robotaccess.UserTable,
			Columns: []string{robotaccess.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   robotaccess.UserTable,
			Columns: []string{robotaccess.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RobotAccess{config: rauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{robotaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
