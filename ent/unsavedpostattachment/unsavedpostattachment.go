// Code generated by entc, DO NOT EDIT.

package unsavedpostattachment

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the unsavedpostattachment type in the database.
	Label = "unsaved_post_attachment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldValidity holds the string denoting the validity field in the database.
	FieldValidity = "validity"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUnsavedPost holds the string denoting the unsaved_post edge name in mutations.
	EdgeUnsavedPost = "unsaved_post"
	// Table holds the table name of the unsavedpostattachment in the database.
	Table = "unsaved_post_attachments"
	// UnsavedPostTable is the table that holds the unsaved_post relation/edge.
	UnsavedPostTable = "unsaved_post_attachments"
	// UnsavedPostInverseTable is the table name for the UnsavedPost entity.
	// It exists in this package in order to avoid circular dependency with the "unsavedpost" package.
	UnsavedPostInverseTable = "unsaved_posts"
	// UnsavedPostColumn is the table column denoting the unsaved_post relation/edge.
	UnsavedPostColumn = "unsaved_post_attachments"
)

// Columns holds all SQL columns for unsavedpostattachment fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldValidity,
	FieldSize,
	FieldName,
	FieldMime,
	FieldURL,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "unsaved_post_attachments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"unsaved_post_attachments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UUIDValidator is a validator for the "uuid" field. It is called by the builders before save.
	UUIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	MimeValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Validity defines the type for the "validity" enum field.
type Validity string

// ValidityPending is the default value of the Validity enum.
const DefaultValidity = ValidityPending

// Validity values.
const (
	ValidityPending Validity = "pending"
	ValidityValid   Validity = "valid"
	ValidityInvalid Validity = "invalid"
)

func (v Validity) String() string {
	return string(v)
}

// ValidityValidator is a validator for the "validity" field enum values. It is called by the builders before save.
func ValidityValidator(v Validity) error {
	switch v {
	case ValidityPending, ValidityValid, ValidityInvalid:
		return nil
	default:
		return fmt.Errorf("unsavedpostattachment: invalid enum value for validity field: %q", v)
	}
}
