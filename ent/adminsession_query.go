// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/adminsession"
	"devlog/ent/predicate"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// AdminSessionQuery is the builder for querying AdminSession entities.
type AdminSessionQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.AdminSession
	// eager-loading edges.
	withUser *AdminQuery
	withFKs  bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AdminSessionQuery builder.
func (asq *AdminSessionQuery) Where(ps ...predicate.AdminSession) *AdminSessionQuery {
	asq.predicates = append(asq.predicates, ps...)
	return asq
}

// Limit adds a limit step to the query.
func (asq *AdminSessionQuery) Limit(limit int) *AdminSessionQuery {
	asq.limit = &limit
	return asq
}

// Offset adds an offset step to the query.
func (asq *AdminSessionQuery) Offset(offset int) *AdminSessionQuery {
	asq.offset = &offset
	return asq
}

// Order adds an order step to the query.
func (asq *AdminSessionQuery) Order(o ...OrderFunc) *AdminSessionQuery {
	asq.order = append(asq.order, o...)
	return asq
}

// QueryUser chains the current query on the "user" edge.
func (asq *AdminSessionQuery) QueryUser() *AdminQuery {
	query := &AdminQuery{config: asq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(adminsession.Table, adminsession.FieldID, selector),
			sqlgraph.To(admin.Table, admin.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, adminsession.UserTable, adminsession.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(asq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AdminSession entity from the query.
// Returns a *NotFoundError when no AdminSession was found.
func (asq *AdminSessionQuery) First(ctx context.Context) (*AdminSession, error) {
	nodes, err := asq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{adminsession.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asq *AdminSessionQuery) FirstX(ctx context.Context) *AdminSession {
	node, err := asq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AdminSession ID from the query.
// Returns a *NotFoundError when no AdminSession ID was found.
func (asq *AdminSessionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = asq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{adminsession.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asq *AdminSessionQuery) FirstIDX(ctx context.Context) int {
	id, err := asq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AdminSession entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AdminSession entity is not found.
// Returns a *NotFoundError when no AdminSession entities are found.
func (asq *AdminSessionQuery) Only(ctx context.Context) (*AdminSession, error) {
	nodes, err := asq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{adminsession.Label}
	default:
		return nil, &NotSingularError{adminsession.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asq *AdminSessionQuery) OnlyX(ctx context.Context) *AdminSession {
	node, err := asq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AdminSession ID in the query.
// Returns a *NotSingularError when exactly one AdminSession ID is not found.
// Returns a *NotFoundError when no entities are found.
func (asq *AdminSessionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = asq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = &NotSingularError{adminsession.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asq *AdminSessionQuery) OnlyIDX(ctx context.Context) int {
	id, err := asq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AdminSessions.
func (asq *AdminSessionQuery) All(ctx context.Context) ([]*AdminSession, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return asq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (asq *AdminSessionQuery) AllX(ctx context.Context) []*AdminSession {
	nodes, err := asq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AdminSession IDs.
func (asq *AdminSessionQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := asq.Select(adminsession.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asq *AdminSessionQuery) IDsX(ctx context.Context) []int {
	ids, err := asq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asq *AdminSessionQuery) Count(ctx context.Context) (int, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return asq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (asq *AdminSessionQuery) CountX(ctx context.Context) int {
	count, err := asq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asq *AdminSessionQuery) Exist(ctx context.Context) (bool, error) {
	if err := asq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return asq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (asq *AdminSessionQuery) ExistX(ctx context.Context) bool {
	exist, err := asq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AdminSessionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asq *AdminSessionQuery) Clone() *AdminSessionQuery {
	if asq == nil {
		return nil
	}
	return &AdminSessionQuery{
		config:     asq.config,
		limit:      asq.limit,
		offset:     asq.offset,
		order:      append([]OrderFunc{}, asq.order...),
		predicates: append([]predicate.AdminSession{}, asq.predicates...),
		withUser:   asq.withUser.Clone(),
		// clone intermediate query.
		sql:  asq.sql.Clone(),
		path: asq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (asq *AdminSessionQuery) WithUser(opts ...func(*AdminQuery)) *AdminSessionQuery {
	query := &AdminQuery{config: asq.config}
	for _, opt := range opts {
		opt(query)
	}
	asq.withUser = query
	return asq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Token string `json:"token,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AdminSession.Query().
//		GroupBy(adminsession.FieldToken).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (asq *AdminSessionQuery) GroupBy(field string, fields ...string) *AdminSessionGroupBy {
	group := &AdminSessionGroupBy{config: asq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := asq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return asq.sqlQuery(), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Token string `json:"token,omitempty"`
//	}
//
//	client.AdminSession.Query().
//		Select(adminsession.FieldToken).
//		Scan(ctx, &v)
//
func (asq *AdminSessionQuery) Select(field string, fields ...string) *AdminSessionSelect {
	asq.fields = append([]string{field}, fields...)
	return &AdminSessionSelect{AdminSessionQuery: asq}
}

func (asq *AdminSessionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range asq.fields {
		if !adminsession.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asq.path != nil {
		prev, err := asq.path(ctx)
		if err != nil {
			return err
		}
		asq.sql = prev
	}
	return nil
}

func (asq *AdminSessionQuery) sqlAll(ctx context.Context) ([]*AdminSession, error) {
	var (
		nodes       = []*AdminSession{}
		withFKs     = asq.withFKs
		_spec       = asq.querySpec()
		loadedTypes = [1]bool{
			asq.withUser != nil,
		}
	)
	if asq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, adminsession.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AdminSession{config: asq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, asq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := asq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AdminSession)
		for i := range nodes {
			if fk := nodes[i].admin_sessions; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(admin.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "admin_sessions" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	return nodes, nil
}

func (asq *AdminSessionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asq.querySpec()
	return sqlgraph.CountNodes(ctx, asq.driver, _spec)
}

func (asq *AdminSessionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := asq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (asq *AdminSessionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminsession.Table,
			Columns: adminsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminsession.FieldID,
			},
		},
		From:   asq.sql,
		Unique: true,
	}
	if fields := asq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminsession.FieldID)
		for i := range fields {
			if fields[i] != adminsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := asq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, adminsession.ValidColumn)
			}
		}
	}
	return _spec
}

func (asq *AdminSessionQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(asq.driver.Dialect())
	t1 := builder.Table(adminsession.Table)
	selector := builder.Select(t1.Columns(adminsession.Columns...)...).From(t1)
	if asq.sql != nil {
		selector = asq.sql
		selector.Select(selector.Columns(adminsession.Columns...)...)
	}
	for _, p := range asq.predicates {
		p(selector)
	}
	for _, p := range asq.order {
		p(selector, adminsession.ValidColumn)
	}
	if offset := asq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AdminSessionGroupBy is the group-by builder for AdminSession entities.
type AdminSessionGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asgb *AdminSessionGroupBy) Aggregate(fns ...AggregateFunc) *AdminSessionGroupBy {
	asgb.fns = append(asgb.fns, fns...)
	return asgb
}

// Scan applies the group-by query and scans the result into the given value.
func (asgb *AdminSessionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := asgb.path(ctx)
	if err != nil {
		return err
	}
	asgb.sql = query
	return asgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := asgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AdminSessionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) StringsX(ctx context.Context) []string {
	v, err := asgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = asgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) StringX(ctx context.Context) string {
	v, err := asgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AdminSessionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) IntsX(ctx context.Context) []int {
	v, err := asgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = asgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) IntX(ctx context.Context) int {
	v, err := asgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AdminSessionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := asgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = asgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) Float64X(ctx context.Context) float64 {
	v, err := asgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(asgb.fields) > 1 {
		return nil, errors.New("ent: AdminSessionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := asgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := asgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (asgb *AdminSessionGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = asgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (asgb *AdminSessionGroupBy) BoolX(ctx context.Context) bool {
	v, err := asgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (asgb *AdminSessionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range asgb.fields {
		if !adminsession.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := asgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (asgb *AdminSessionGroupBy) sqlQuery() *sql.Selector {
	selector := asgb.sql
	columns := make([]string, 0, len(asgb.fields)+len(asgb.fns))
	columns = append(columns, asgb.fields...)
	for _, fn := range asgb.fns {
		columns = append(columns, fn(selector, adminsession.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(asgb.fields...)
}

// AdminSessionSelect is the builder for selecting fields of AdminSession entities.
type AdminSessionSelect struct {
	*AdminSessionQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ass *AdminSessionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ass.prepareQuery(ctx); err != nil {
		return err
	}
	ass.sql = ass.AdminSessionQuery.sqlQuery()
	return ass.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ass *AdminSessionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ass.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AdminSessionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ass *AdminSessionSelect) StringsX(ctx context.Context) []string {
	v, err := ass.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ass.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ass *AdminSessionSelect) StringX(ctx context.Context) string {
	v, err := ass.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AdminSessionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ass *AdminSessionSelect) IntsX(ctx context.Context) []int {
	v, err := ass.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ass.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ass *AdminSessionSelect) IntX(ctx context.Context) int {
	v, err := ass.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AdminSessionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ass *AdminSessionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ass.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ass.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ass *AdminSessionSelect) Float64X(ctx context.Context) float64 {
	v, err := ass.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ass.fields) > 1 {
		return nil, errors.New("ent: AdminSessionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ass.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ass *AdminSessionSelect) BoolsX(ctx context.Context) []bool {
	v, err := ass.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ass *AdminSessionSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ass.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{adminsession.Label}
	default:
		err = fmt.Errorf("ent: AdminSessionSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ass *AdminSessionSelect) BoolX(ctx context.Context) bool {
	v, err := ass.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ass *AdminSessionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ass.sqlQuery().Query()
	if err := ass.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ass *AdminSessionSelect) sqlQuery() sql.Querier {
	selector := ass.sql
	selector.Select(selector.Columns(ass.fields...)...)
	return selector
}
