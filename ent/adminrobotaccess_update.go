// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/adminrobotaccess"
	"devlog/ent/predicate"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminRobotAccessUpdate is the builder for updating AdminRobotAccess entities.
type AdminRobotAccessUpdate struct {
	config
	hooks    []Hook
	mutation *AdminRobotAccessMutation
}

// Where appends a list predicates to the AdminRobotAccessUpdate builder.
func (arau *AdminRobotAccessUpdate) Where(ps ...predicate.AdminRobotAccess) *AdminRobotAccessUpdate {
	arau.mutation.Where(ps...)
	return arau
}

// SetToken sets the "token" field.
func (arau *AdminRobotAccessUpdate) SetToken(s string) *AdminRobotAccessUpdate {
	arau.mutation.SetToken(s)
	return arau
}

// SetExpiresAt sets the "expires_at" field.
func (arau *AdminRobotAccessUpdate) SetExpiresAt(t time.Time) *AdminRobotAccessUpdate {
	arau.mutation.SetExpiresAt(t)
	return arau
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (arau *AdminRobotAccessUpdate) SetNillableExpiresAt(t *time.Time) *AdminRobotAccessUpdate {
	if t != nil {
		arau.SetExpiresAt(*t)
	}
	return arau
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (arau *AdminRobotAccessUpdate) ClearExpiresAt() *AdminRobotAccessUpdate {
	arau.mutation.ClearExpiresAt()
	return arau
}

// SetCreatedAt sets the "created_at" field.
func (arau *AdminRobotAccessUpdate) SetCreatedAt(t time.Time) *AdminRobotAccessUpdate {
	arau.mutation.SetCreatedAt(t)
	return arau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arau *AdminRobotAccessUpdate) SetNillableCreatedAt(t *time.Time) *AdminRobotAccessUpdate {
	if t != nil {
		arau.SetCreatedAt(*t)
	}
	return arau
}

// SetLastAccessAt sets the "last_access_at" field.
func (arau *AdminRobotAccessUpdate) SetLastAccessAt(t time.Time) *AdminRobotAccessUpdate {
	arau.mutation.SetLastAccessAt(t)
	return arau
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (arau *AdminRobotAccessUpdate) SetNillableLastAccessAt(t *time.Time) *AdminRobotAccessUpdate {
	if t != nil {
		arau.SetLastAccessAt(*t)
	}
	return arau
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (arau *AdminRobotAccessUpdate) ClearLastAccessAt() *AdminRobotAccessUpdate {
	arau.mutation.ClearLastAccessAt()
	return arau
}

// AddUserIDs adds the "user" edge to the Admin entity by IDs.
func (arau *AdminRobotAccessUpdate) AddUserIDs(ids ...int) *AdminRobotAccessUpdate {
	arau.mutation.AddUserIDs(ids...)
	return arau
}

// AddUser adds the "user" edges to the Admin entity.
func (arau *AdminRobotAccessUpdate) AddUser(a ...*Admin) *AdminRobotAccessUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arau.AddUserIDs(ids...)
}

// Mutation returns the AdminRobotAccessMutation object of the builder.
func (arau *AdminRobotAccessUpdate) Mutation() *AdminRobotAccessMutation {
	return arau.mutation
}

// ClearUser clears all "user" edges to the Admin entity.
func (arau *AdminRobotAccessUpdate) ClearUser() *AdminRobotAccessUpdate {
	arau.mutation.ClearUser()
	return arau
}

// RemoveUserIDs removes the "user" edge to Admin entities by IDs.
func (arau *AdminRobotAccessUpdate) RemoveUserIDs(ids ...int) *AdminRobotAccessUpdate {
	arau.mutation.RemoveUserIDs(ids...)
	return arau
}

// RemoveUser removes "user" edges to Admin entities.
func (arau *AdminRobotAccessUpdate) RemoveUser(a ...*Admin) *AdminRobotAccessUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arau.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arau *AdminRobotAccessUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(arau.hooks) == 0 {
		if err = arau.check(); err != nil {
			return 0, err
		}
		affected, err = arau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arau.check(); err != nil {
				return 0, err
			}
			arau.mutation = mutation
			affected, err = arau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(arau.hooks) - 1; i >= 0; i-- {
			if arau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (arau *AdminRobotAccessUpdate) SaveX(ctx context.Context) int {
	affected, err := arau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arau *AdminRobotAccessUpdate) Exec(ctx context.Context) error {
	_, err := arau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arau *AdminRobotAccessUpdate) ExecX(ctx context.Context) {
	if err := arau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arau *AdminRobotAccessUpdate) check() error {
	if v, ok := arau.mutation.Token(); ok {
		if err := adminrobotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	return nil
}

func (arau *AdminRobotAccessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminrobotaccess.Table,
			Columns: adminrobotaccess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrobotaccess.FieldID,
			},
		},
	}
	if ps := arau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arau.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrobotaccess.FieldToken,
		})
	}
	if value, ok := arau.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldExpiresAt,
		})
	}
	if arau.mutation.ExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrobotaccess.FieldExpiresAt,
		})
	}
	if value, ok := arau.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldCreatedAt,
		})
	}
	if value, ok := arau.mutation.LastAccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldLastAccessAt,
		})
	}
	if arau.mutation.LastAccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrobotaccess.FieldLastAccessAt,
		})
	}
	if arau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arau.mutation.RemovedUserIDs(); len(nodes) > 0 && !arau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, arau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrobotaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AdminRobotAccessUpdateOne is the builder for updating a single AdminRobotAccess entity.
type AdminRobotAccessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdminRobotAccessMutation
}

// SetToken sets the "token" field.
func (arauo *AdminRobotAccessUpdateOne) SetToken(s string) *AdminRobotAccessUpdateOne {
	arauo.mutation.SetToken(s)
	return arauo
}

// SetExpiresAt sets the "expires_at" field.
func (arauo *AdminRobotAccessUpdateOne) SetExpiresAt(t time.Time) *AdminRobotAccessUpdateOne {
	arauo.mutation.SetExpiresAt(t)
	return arauo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (arauo *AdminRobotAccessUpdateOne) SetNillableExpiresAt(t *time.Time) *AdminRobotAccessUpdateOne {
	if t != nil {
		arauo.SetExpiresAt(*t)
	}
	return arauo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (arauo *AdminRobotAccessUpdateOne) ClearExpiresAt() *AdminRobotAccessUpdateOne {
	arauo.mutation.ClearExpiresAt()
	return arauo
}

// SetCreatedAt sets the "created_at" field.
func (arauo *AdminRobotAccessUpdateOne) SetCreatedAt(t time.Time) *AdminRobotAccessUpdateOne {
	arauo.mutation.SetCreatedAt(t)
	return arauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arauo *AdminRobotAccessUpdateOne) SetNillableCreatedAt(t *time.Time) *AdminRobotAccessUpdateOne {
	if t != nil {
		arauo.SetCreatedAt(*t)
	}
	return arauo
}

// SetLastAccessAt sets the "last_access_at" field.
func (arauo *AdminRobotAccessUpdateOne) SetLastAccessAt(t time.Time) *AdminRobotAccessUpdateOne {
	arauo.mutation.SetLastAccessAt(t)
	return arauo
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (arauo *AdminRobotAccessUpdateOne) SetNillableLastAccessAt(t *time.Time) *AdminRobotAccessUpdateOne {
	if t != nil {
		arauo.SetLastAccessAt(*t)
	}
	return arauo
}

// ClearLastAccessAt clears the value of the "last_access_at" field.
func (arauo *AdminRobotAccessUpdateOne) ClearLastAccessAt() *AdminRobotAccessUpdateOne {
	arauo.mutation.ClearLastAccessAt()
	return arauo
}

// AddUserIDs adds the "user" edge to the Admin entity by IDs.
func (arauo *AdminRobotAccessUpdateOne) AddUserIDs(ids ...int) *AdminRobotAccessUpdateOne {
	arauo.mutation.AddUserIDs(ids...)
	return arauo
}

// AddUser adds the "user" edges to the Admin entity.
func (arauo *AdminRobotAccessUpdateOne) AddUser(a ...*Admin) *AdminRobotAccessUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arauo.AddUserIDs(ids...)
}

// Mutation returns the AdminRobotAccessMutation object of the builder.
func (arauo *AdminRobotAccessUpdateOne) Mutation() *AdminRobotAccessMutation {
	return arauo.mutation
}

// ClearUser clears all "user" edges to the Admin entity.
func (arauo *AdminRobotAccessUpdateOne) ClearUser() *AdminRobotAccessUpdateOne {
	arauo.mutation.ClearUser()
	return arauo
}

// RemoveUserIDs removes the "user" edge to Admin entities by IDs.
func (arauo *AdminRobotAccessUpdateOne) RemoveUserIDs(ids ...int) *AdminRobotAccessUpdateOne {
	arauo.mutation.RemoveUserIDs(ids...)
	return arauo
}

// RemoveUser removes "user" edges to Admin entities.
func (arauo *AdminRobotAccessUpdateOne) RemoveUser(a ...*Admin) *AdminRobotAccessUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arauo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arauo *AdminRobotAccessUpdateOne) Select(field string, fields ...string) *AdminRobotAccessUpdateOne {
	arauo.fields = append([]string{field}, fields...)
	return arauo
}

// Save executes the query and returns the updated AdminRobotAccess entity.
func (arauo *AdminRobotAccessUpdateOne) Save(ctx context.Context) (*AdminRobotAccess, error) {
	var (
		err  error
		node *AdminRobotAccess
	)
	if len(arauo.hooks) == 0 {
		if err = arauo.check(); err != nil {
			return nil, err
		}
		node, err = arauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arauo.check(); err != nil {
				return nil, err
			}
			arauo.mutation = mutation
			node, err = arauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(arauo.hooks) - 1; i >= 0; i-- {
			if arauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (arauo *AdminRobotAccessUpdateOne) SaveX(ctx context.Context) *AdminRobotAccess {
	node, err := arauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arauo *AdminRobotAccessUpdateOne) Exec(ctx context.Context) error {
	_, err := arauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arauo *AdminRobotAccessUpdateOne) ExecX(ctx context.Context) {
	if err := arauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arauo *AdminRobotAccessUpdateOne) check() error {
	if v, ok := arauo.mutation.Token(); ok {
		if err := adminrobotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf("ent: validator failed for field \"token\": %w", err)}
		}
	}
	return nil
}

func (arauo *AdminRobotAccessUpdateOne) sqlSave(ctx context.Context) (_node *AdminRobotAccess, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   adminrobotaccess.Table,
			Columns: adminrobotaccess.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrobotaccess.FieldID,
			},
		},
	}
	id, ok := arauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AdminRobotAccess.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := arauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adminrobotaccess.FieldID)
		for _, f := range fields {
			if !adminrobotaccess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adminrobotaccess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := arauo.mutation.Token(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrobotaccess.FieldToken,
		})
	}
	if value, ok := arauo.mutation.ExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldExpiresAt,
		})
	}
	if arauo.mutation.ExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrobotaccess.FieldExpiresAt,
		})
	}
	if value, ok := arauo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldCreatedAt,
		})
	}
	if value, ok := arauo.mutation.LastAccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldLastAccessAt,
		})
	}
	if arauo.mutation.LastAccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: adminrobotaccess.FieldLastAccessAt,
		})
	}
	if arauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arauo.mutation.RemovedUserIDs(); len(nodes) > 0 && !arauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AdminRobotAccess{config: arauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adminrobotaccess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
