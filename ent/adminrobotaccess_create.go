// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"devlog/ent/admin"
	"devlog/ent/adminrobotaccess"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminRobotAccessCreate is the builder for creating a AdminRobotAccess entity.
type AdminRobotAccessCreate struct {
	config
	mutation *AdminRobotAccessMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (arac *AdminRobotAccessCreate) SetToken(s string) *AdminRobotAccessCreate {
	arac.mutation.SetToken(s)
	return arac
}

// SetExpiresAt sets the "expires_at" field.
func (arac *AdminRobotAccessCreate) SetExpiresAt(t time.Time) *AdminRobotAccessCreate {
	arac.mutation.SetExpiresAt(t)
	return arac
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (arac *AdminRobotAccessCreate) SetNillableExpiresAt(t *time.Time) *AdminRobotAccessCreate {
	if t != nil {
		arac.SetExpiresAt(*t)
	}
	return arac
}

// SetCreatedAt sets the "created_at" field.
func (arac *AdminRobotAccessCreate) SetCreatedAt(t time.Time) *AdminRobotAccessCreate {
	arac.mutation.SetCreatedAt(t)
	return arac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arac *AdminRobotAccessCreate) SetNillableCreatedAt(t *time.Time) *AdminRobotAccessCreate {
	if t != nil {
		arac.SetCreatedAt(*t)
	}
	return arac
}

// SetLastAccessAt sets the "last_access_at" field.
func (arac *AdminRobotAccessCreate) SetLastAccessAt(t time.Time) *AdminRobotAccessCreate {
	arac.mutation.SetLastAccessAt(t)
	return arac
}

// SetNillableLastAccessAt sets the "last_access_at" field if the given value is not nil.
func (arac *AdminRobotAccessCreate) SetNillableLastAccessAt(t *time.Time) *AdminRobotAccessCreate {
	if t != nil {
		arac.SetLastAccessAt(*t)
	}
	return arac
}

// AddUserIDs adds the "user" edge to the Admin entity by IDs.
func (arac *AdminRobotAccessCreate) AddUserIDs(ids ...int) *AdminRobotAccessCreate {
	arac.mutation.AddUserIDs(ids...)
	return arac
}

// AddUser adds the "user" edges to the Admin entity.
func (arac *AdminRobotAccessCreate) AddUser(a ...*Admin) *AdminRobotAccessCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arac.AddUserIDs(ids...)
}

// Mutation returns the AdminRobotAccessMutation object of the builder.
func (arac *AdminRobotAccessCreate) Mutation() *AdminRobotAccessMutation {
	return arac.mutation
}

// Save creates the AdminRobotAccess in the database.
func (arac *AdminRobotAccessCreate) Save(ctx context.Context) (*AdminRobotAccess, error) {
	var (
		err  error
		node *AdminRobotAccess
	)
	arac.defaults()
	if len(arac.hooks) == 0 {
		if err = arac.check(); err != nil {
			return nil, err
		}
		node, err = arac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AdminRobotAccessMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arac.check(); err != nil {
				return nil, err
			}
			arac.mutation = mutation
			if node, err = arac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(arac.hooks) - 1; i >= 0; i-- {
			if arac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arac *AdminRobotAccessCreate) SaveX(ctx context.Context) *AdminRobotAccess {
	v, err := arac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arac *AdminRobotAccessCreate) Exec(ctx context.Context) error {
	_, err := arac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arac *AdminRobotAccessCreate) ExecX(ctx context.Context) {
	if err := arac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arac *AdminRobotAccessCreate) defaults() {
	if _, ok := arac.mutation.CreatedAt(); !ok {
		v := adminrobotaccess.DefaultCreatedAt()
		arac.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arac *AdminRobotAccessCreate) check() error {
	if _, ok := arac.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "token"`)}
	}
	if v, ok := arac.mutation.Token(); ok {
		if err := adminrobotaccess.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "token": %w`, err)}
		}
	}
	if _, ok := arac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if len(arac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (arac *AdminRobotAccessCreate) sqlSave(ctx context.Context) (*AdminRobotAccess, error) {
	_node, _spec := arac.createSpec()
	if err := sqlgraph.CreateNode(ctx, arac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (arac *AdminRobotAccessCreate) createSpec() (*AdminRobotAccess, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminRobotAccess{config: arac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: adminrobotaccess.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: adminrobotaccess.FieldID,
			},
		}
	)
	if value, ok := arac.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: adminrobotaccess.FieldToken,
		})
		_node.Token = value
	}
	if value, ok := arac.mutation.ExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldExpiresAt,
		})
		_node.ExpiresAt = value
	}
	if value, ok := arac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := arac.mutation.LastAccessAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: adminrobotaccess.FieldLastAccessAt,
		})
		_node.LastAccessAt = value
	}
	if nodes := arac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   adminrobotaccess.UserTable,
			Columns: adminrobotaccess.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: admin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AdminRobotAccessCreateBulk is the builder for creating many AdminRobotAccess entities in bulk.
type AdminRobotAccessCreateBulk struct {
	config
	builders []*AdminRobotAccessCreate
}

// Save creates the AdminRobotAccess entities in the database.
func (aracb *AdminRobotAccessCreateBulk) Save(ctx context.Context) ([]*AdminRobotAccess, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aracb.builders))
	nodes := make([]*AdminRobotAccess, len(aracb.builders))
	mutators := make([]Mutator, len(aracb.builders))
	for i := range aracb.builders {
		func(i int, root context.Context) {
			builder := aracb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminRobotAccessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aracb *AdminRobotAccessCreateBulk) SaveX(ctx context.Context) []*AdminRobotAccess {
	v, err := aracb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aracb *AdminRobotAccessCreateBulk) Exec(ctx context.Context) error {
	_, err := aracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aracb *AdminRobotAccessCreateBulk) ExecX(ctx context.Context) {
	if err := aracb.Exec(ctx); err != nil {
		panic(err)
	}
}
