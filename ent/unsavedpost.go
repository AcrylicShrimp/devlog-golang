// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/admin"
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostthumbnail"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UnsavedPost is the model entity for the UnsavedPost schema.
type UnsavedPost struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug *string `json:"slug,omitempty"`
	// AccessLevel holds the value of the "access_level" field.
	AccessLevel *unsavedpost.AccessLevel `json:"access_level,omitempty"`
	// Title holds the value of the "title" field.
	Title *string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content *string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnsavedPostQuery when eager-loading is set.
	Edges               UnsavedPostEdges `json:"edges"`
	admin_unsaved_posts *int
}

// UnsavedPostEdges holds the relations/edges for other nodes in the graph.
type UnsavedPostEdges struct {
	// Author holds the value of the author edge.
	Author *Admin `json:"author,omitempty"`
	// Thumbnail holds the value of the thumbnail edge.
	Thumbnail *UnsavedPostThumbnail `json:"thumbnail,omitempty"`
	// Images holds the value of the images edge.
	Images []*UnsavedPostImage `json:"images,omitempty"`
	// Videos holds the value of the videos edge.
	Videos []*UnsavedPostVideo `json:"videos,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*UnsavedPostAttachment `json:"attachments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnsavedPostEdges) AuthorOrErr() (*Admin, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: admin.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ThumbnailOrErr returns the Thumbnail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnsavedPostEdges) ThumbnailOrErr() (*UnsavedPostThumbnail, error) {
	if e.loadedTypes[1] {
		if e.Thumbnail == nil {
			// The edge thumbnail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unsavedpostthumbnail.Label}
		}
		return e.Thumbnail, nil
	}
	return nil, &NotLoadedError{edge: "thumbnail"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e UnsavedPostEdges) ImagesOrErr() ([]*UnsavedPostImage, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// VideosOrErr returns the Videos value or an error if the edge
// was not loaded in eager-loading.
func (e UnsavedPostEdges) VideosOrErr() ([]*UnsavedPostVideo, error) {
	if e.loadedTypes[3] {
		return e.Videos, nil
	}
	return nil, &NotLoadedError{edge: "videos"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e UnsavedPostEdges) AttachmentsOrErr() ([]*UnsavedPostAttachment, error) {
	if e.loadedTypes[4] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnsavedPost) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case unsavedpost.FieldID:
			values[i] = new(sql.NullInt64)
		case unsavedpost.FieldUUID, unsavedpost.FieldSlug, unsavedpost.FieldAccessLevel, unsavedpost.FieldTitle, unsavedpost.FieldContent:
			values[i] = new(sql.NullString)
		case unsavedpost.FieldCreatedAt, unsavedpost.FieldModifiedAt:
			values[i] = new(sql.NullTime)
		case unsavedpost.ForeignKeys[0]: // admin_unsaved_posts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UnsavedPost", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnsavedPost fields.
func (up *UnsavedPost) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unsavedpost.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			up.ID = int(value.Int64)
		case unsavedpost.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				up.UUID = value.String
			}
		case unsavedpost.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				up.Slug = new(string)
				*up.Slug = value.String
			}
		case unsavedpost.FieldAccessLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_level", values[i])
			} else if value.Valid {
				up.AccessLevel = new(unsavedpost.AccessLevel)
				*up.AccessLevel = unsavedpost.AccessLevel(value.String)
			}
		case unsavedpost.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				up.Title = new(string)
				*up.Title = value.String
			}
		case unsavedpost.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				up.Content = new(string)
				*up.Content = value.String
			}
		case unsavedpost.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case unsavedpost.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				up.ModifiedAt = value.Time
			}
		case unsavedpost.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field admin_unsaved_posts", value)
			} else if value.Valid {
				up.admin_unsaved_posts = new(int)
				*up.admin_unsaved_posts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the UnsavedPost entity.
func (up *UnsavedPost) QueryAuthor() *AdminQuery {
	return (&UnsavedPostClient{config: up.config}).QueryAuthor(up)
}

// QueryThumbnail queries the "thumbnail" edge of the UnsavedPost entity.
func (up *UnsavedPost) QueryThumbnail() *UnsavedPostThumbnailQuery {
	return (&UnsavedPostClient{config: up.config}).QueryThumbnail(up)
}

// QueryImages queries the "images" edge of the UnsavedPost entity.
func (up *UnsavedPost) QueryImages() *UnsavedPostImageQuery {
	return (&UnsavedPostClient{config: up.config}).QueryImages(up)
}

// QueryVideos queries the "videos" edge of the UnsavedPost entity.
func (up *UnsavedPost) QueryVideos() *UnsavedPostVideoQuery {
	return (&UnsavedPostClient{config: up.config}).QueryVideos(up)
}

// QueryAttachments queries the "attachments" edge of the UnsavedPost entity.
func (up *UnsavedPost) QueryAttachments() *UnsavedPostAttachmentQuery {
	return (&UnsavedPostClient{config: up.config}).QueryAttachments(up)
}

// Update returns a builder for updating this UnsavedPost.
// Note that you need to call UnsavedPost.Unwrap() before calling this method if this UnsavedPost
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UnsavedPost) Update() *UnsavedPostUpdateOne {
	return (&UnsavedPostClient{config: up.config}).UpdateOne(up)
}

// Unwrap unwraps the UnsavedPost entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UnsavedPost) Unwrap() *UnsavedPost {
	tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnsavedPost is not a transactional entity")
	}
	up.config.driver = tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UnsavedPost) String() string {
	var builder strings.Builder
	builder.WriteString("UnsavedPost(")
	builder.WriteString(fmt.Sprintf("id=%v", up.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(up.UUID)
	if v := up.Slug; v != nil {
		builder.WriteString(", slug=")
		builder.WriteString(*v)
	}
	if v := up.AccessLevel; v != nil {
		builder.WriteString(", access_level=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := up.Title; v != nil {
		builder.WriteString(", title=")
		builder.WriteString(*v)
	}
	if v := up.Content; v != nil {
		builder.WriteString(", content=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", modified_at=")
	builder.WriteString(up.ModifiedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UnsavedPosts is a parsable slice of UnsavedPost.
type UnsavedPosts []*UnsavedPost

func (up UnsavedPosts) config(cfg config) {
	for _i := range up {
		up[_i].config = cfg
	}
}
