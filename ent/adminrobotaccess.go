// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/adminrobotaccess"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AdminRobotAccess is the model entity for the AdminRobotAccess schema.
type AdminRobotAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastAccessAt holds the value of the "last_access_at" field.
	LastAccessAt time.Time `json:"last_access_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AdminRobotAccessQuery when eager-loading is set.
	Edges AdminRobotAccessEdges `json:"edges"`
}

// AdminRobotAccessEdges holds the relations/edges for other nodes in the graph.
type AdminRobotAccessEdges struct {
	// User holds the value of the user edge.
	User []*Admin `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e AdminRobotAccessEdges) UserOrErr() ([]*Admin, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminRobotAccess) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminrobotaccess.FieldID:
			values[i] = new(sql.NullInt64)
		case adminrobotaccess.FieldToken:
			values[i] = new(sql.NullString)
		case adminrobotaccess.FieldExpiresAt, adminrobotaccess.FieldCreatedAt, adminrobotaccess.FieldLastAccessAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AdminRobotAccess", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminRobotAccess fields.
func (ara *AdminRobotAccess) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminrobotaccess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ara.ID = int(value.Int64)
		case adminrobotaccess.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ara.Token = value.String
			}
		case adminrobotaccess.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ara.ExpiresAt = value.Time
			}
		case adminrobotaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ara.CreatedAt = value.Time
			}
		case adminrobotaccess.FieldLastAccessAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_access_at", values[i])
			} else if value.Valid {
				ara.LastAccessAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the AdminRobotAccess entity.
func (ara *AdminRobotAccess) QueryUser() *AdminQuery {
	return (&AdminRobotAccessClient{config: ara.config}).QueryUser(ara)
}

// Update returns a builder for updating this AdminRobotAccess.
// Note that you need to call AdminRobotAccess.Unwrap() before calling this method if this AdminRobotAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (ara *AdminRobotAccess) Update() *AdminRobotAccessUpdateOne {
	return (&AdminRobotAccessClient{config: ara.config}).UpdateOne(ara)
}

// Unwrap unwraps the AdminRobotAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ara *AdminRobotAccess) Unwrap() *AdminRobotAccess {
	tx, ok := ara.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminRobotAccess is not a transactional entity")
	}
	ara.config.driver = tx.drv
	return ara
}

// String implements the fmt.Stringer.
func (ara *AdminRobotAccess) String() string {
	var builder strings.Builder
	builder.WriteString("AdminRobotAccess(")
	builder.WriteString(fmt.Sprintf("id=%v", ara.ID))
	builder.WriteString(", token=")
	builder.WriteString(ara.Token)
	builder.WriteString(", expires_at=")
	builder.WriteString(ara.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(ara.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", last_access_at=")
	builder.WriteString(ara.LastAccessAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminRobotAccesses is a parsable slice of AdminRobotAccess.
type AdminRobotAccesses []*AdminRobotAccess

func (ara AdminRobotAccesses) config(cfg config) {
	for _i := range ara {
		ara[_i].config = cfg
	}
}
