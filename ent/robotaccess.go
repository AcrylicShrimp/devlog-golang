// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/robotaccess"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RobotAccess is the model entity for the RobotAccess schema.
type RobotAccess struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo *string `json:"memo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// LastAccessAt holds the value of the "last_access_at" field.
	LastAccessAt *time.Time `json:"last_access_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RobotAccessQuery when eager-loading is set.
	Edges RobotAccessEdges `json:"edges"`
}

// RobotAccessEdges holds the relations/edges for other nodes in the graph.
type RobotAccessEdges struct {
	// User holds the value of the user edge.
	User []*Admin `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e RobotAccessEdges) UserOrErr() ([]*Admin, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RobotAccess) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case robotaccess.FieldID:
			values[i] = new(sql.NullInt64)
		case robotaccess.FieldToken, robotaccess.FieldMemo:
			values[i] = new(sql.NullString)
		case robotaccess.FieldCreatedAt, robotaccess.FieldExpiresAt, robotaccess.FieldLastAccessAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RobotAccess", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RobotAccess fields.
func (ra *RobotAccess) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case robotaccess.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ra.ID = int(value.Int64)
		case robotaccess.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ra.Token = value.String
			}
		case robotaccess.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				ra.Memo = new(string)
				*ra.Memo = value.String
			}
		case robotaccess.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ra.CreatedAt = value.Time
			}
		case robotaccess.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ra.ExpiresAt = new(time.Time)
				*ra.ExpiresAt = value.Time
			}
		case robotaccess.FieldLastAccessAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_access_at", values[i])
			} else if value.Valid {
				ra.LastAccessAt = new(time.Time)
				*ra.LastAccessAt = value.Time
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the RobotAccess entity.
func (ra *RobotAccess) QueryUser() *AdminQuery {
	return (&RobotAccessClient{config: ra.config}).QueryUser(ra)
}

// Update returns a builder for updating this RobotAccess.
// Note that you need to call RobotAccess.Unwrap() before calling this method if this RobotAccess
// was returned from a transaction, and the transaction was committed or rolled back.
func (ra *RobotAccess) Update() *RobotAccessUpdateOne {
	return (&RobotAccessClient{config: ra.config}).UpdateOne(ra)
}

// Unwrap unwraps the RobotAccess entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ra *RobotAccess) Unwrap() *RobotAccess {
	tx, ok := ra.config.driver.(*txDriver)
	if !ok {
		panic("ent: RobotAccess is not a transactional entity")
	}
	ra.config.driver = tx.drv
	return ra
}

// String implements the fmt.Stringer.
func (ra *RobotAccess) String() string {
	var builder strings.Builder
	builder.WriteString("RobotAccess(")
	builder.WriteString(fmt.Sprintf("id=%v", ra.ID))
	builder.WriteString(", token=")
	builder.WriteString(ra.Token)
	if v := ra.Memo; v != nil {
		builder.WriteString(", memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(ra.CreatedAt.Format(time.ANSIC))
	if v := ra.ExpiresAt; v != nil {
		builder.WriteString(", expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ra.LastAccessAt; v != nil {
		builder.WriteString(", last_access_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// RobotAccesses is a parsable slice of RobotAccess.
type RobotAccesses []*RobotAccess

func (ra RobotAccesses) config(cfg config) {
	for _i := range ra {
		ra[_i].config = cfg
	}
}
