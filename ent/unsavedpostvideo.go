// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/unsavedpost"
	"devlog/ent/unsavedpostvideo"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UnsavedPostVideo is the model entity for the UnsavedPostVideo schema.
type UnsavedPostVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UnsavedPostVideoQuery when eager-loading is set.
	Edges               UnsavedPostVideoEdges `json:"edges"`
	unsaved_post_videos *int
}

// UnsavedPostVideoEdges holds the relations/edges for other nodes in the graph.
type UnsavedPostVideoEdges struct {
	// UnsavedPost holds the value of the unsaved_post edge.
	UnsavedPost *UnsavedPost `json:"unsaved_post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UnsavedPostOrErr returns the UnsavedPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UnsavedPostVideoEdges) UnsavedPostOrErr() (*UnsavedPost, error) {
	if e.loadedTypes[0] {
		if e.UnsavedPost == nil {
			// The edge unsaved_post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: unsavedpost.Label}
		}
		return e.UnsavedPost, nil
	}
	return nil, &NotLoadedError{edge: "unsaved_post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UnsavedPostVideo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case unsavedpostvideo.FieldID:
			values[i] = new(sql.NullInt64)
		case unsavedpostvideo.FieldUUID, unsavedpostvideo.FieldTitle, unsavedpostvideo.FieldURL:
			values[i] = new(sql.NullString)
		case unsavedpostvideo.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case unsavedpostvideo.ForeignKeys[0]: // unsaved_post_videos
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UnsavedPostVideo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UnsavedPostVideo fields.
func (upv *UnsavedPostVideo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case unsavedpostvideo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			upv.ID = int(value.Int64)
		case unsavedpostvideo.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				upv.UUID = value.String
			}
		case unsavedpostvideo.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				upv.Title = value.String
			}
		case unsavedpostvideo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				upv.URL = value.String
			}
		case unsavedpostvideo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				upv.CreatedAt = value.Time
			}
		case unsavedpostvideo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field unsaved_post_videos", value)
			} else if value.Valid {
				upv.unsaved_post_videos = new(int)
				*upv.unsaved_post_videos = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUnsavedPost queries the "unsaved_post" edge of the UnsavedPostVideo entity.
func (upv *UnsavedPostVideo) QueryUnsavedPost() *UnsavedPostQuery {
	return (&UnsavedPostVideoClient{config: upv.config}).QueryUnsavedPost(upv)
}

// Update returns a builder for updating this UnsavedPostVideo.
// Note that you need to call UnsavedPostVideo.Unwrap() before calling this method if this UnsavedPostVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (upv *UnsavedPostVideo) Update() *UnsavedPostVideoUpdateOne {
	return (&UnsavedPostVideoClient{config: upv.config}).UpdateOne(upv)
}

// Unwrap unwraps the UnsavedPostVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (upv *UnsavedPostVideo) Unwrap() *UnsavedPostVideo {
	tx, ok := upv.config.driver.(*txDriver)
	if !ok {
		panic("ent: UnsavedPostVideo is not a transactional entity")
	}
	upv.config.driver = tx.drv
	return upv
}

// String implements the fmt.Stringer.
func (upv *UnsavedPostVideo) String() string {
	var builder strings.Builder
	builder.WriteString("UnsavedPostVideo(")
	builder.WriteString(fmt.Sprintf("id=%v", upv.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(upv.UUID)
	builder.WriteString(", title=")
	builder.WriteString(upv.Title)
	builder.WriteString(", url=")
	builder.WriteString(upv.URL)
	builder.WriteString(", created_at=")
	builder.WriteString(upv.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UnsavedPostVideos is a parsable slice of UnsavedPostVideo.
type UnsavedPostVideos []*UnsavedPostVideo

func (upv UnsavedPostVideos) config(cfg config) {
	for _i := range upv {
		upv[_i].config = cfg
	}
}
