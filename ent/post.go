// Code generated by entc, DO NOT EDIT.

package ent

import (
	"devlog/ent/category"
	"devlog/ent/post"
	"devlog/ent/postthumbnail"
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// AccessLevel holds the value of the "access_level" field.
	AccessLevel post.AccessLevel `json:"access_level,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// HTMLContent holds the value of the "html_content" field.
	HTMLContent string `json:"html_content,omitempty"`
	// PreviewContent holds the value of the "preview_content" field.
	PreviewContent string `json:"preview_content,omitempty"`
	// AccumulatedImageIndex holds the value of the "accumulated_image_index" field.
	AccumulatedImageIndex uint64 `json:"accumulated_image_index,omitempty"`
	// AccumulatedVideoIndex holds the value of the "accumulated_video_index" field.
	AccumulatedVideoIndex uint64 `json:"accumulated_video_index,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges          PostEdges `json:"edges"`
	category_posts *int
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Category holds the value of the category edge.
	Category *Category
	// Thumbnail holds the value of the thumbnail edge.
	Thumbnail *PostThumbnail
	// Images holds the value of the images edge.
	Images []*PostImage
	// Videos holds the value of the videos edge.
	Videos []*PostVideo
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[0] {
		if e.Category == nil {
			// The edge category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// ThumbnailOrErr returns the Thumbnail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) ThumbnailOrErr() (*PostThumbnail, error) {
	if e.loadedTypes[1] {
		if e.Thumbnail == nil {
			// The edge thumbnail was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: postthumbnail.Label}
		}
		return e.Thumbnail, nil
	}
	return nil, &NotLoadedError{edge: "thumbnail"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) ImagesOrErr() ([]*PostImage, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// VideosOrErr returns the Videos value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) VideosOrErr() ([]*PostVideo, error) {
	if e.loadedTypes[3] {
		return e.Videos, nil
	}
	return nil, &NotLoadedError{edge: "videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case post.FieldID, post.FieldAccumulatedImageIndex, post.FieldAccumulatedVideoIndex:
			values[i] = &sql.NullInt64{}
		case post.FieldUUID, post.FieldSlug, post.FieldAccessLevel, post.FieldTitle, post.FieldContent, post.FieldHTMLContent, post.FieldPreviewContent:
			values[i] = &sql.NullString{}
		case post.FieldCreatedAt, post.FieldModifiedAt:
			values[i] = &sql.NullTime{}
		case post.ForeignKeys[0]: // category_posts
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Post", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case post.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case post.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				po.UUID = value.String
			}
		case post.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				po.Slug = value.String
			}
		case post.FieldAccessLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_level", values[i])
			} else if value.Valid {
				po.AccessLevel = post.AccessLevel(value.String)
			}
		case post.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case post.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				po.Content = value.String
			}
		case post.FieldHTMLContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field html_content", values[i])
			} else if value.Valid {
				po.HTMLContent = value.String
			}
		case post.FieldPreviewContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field preview_content", values[i])
			} else if value.Valid {
				po.PreviewContent = value.String
			}
		case post.FieldAccumulatedImageIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accumulated_image_index", values[i])
			} else if value.Valid {
				po.AccumulatedImageIndex = uint64(value.Int64)
			}
		case post.FieldAccumulatedVideoIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field accumulated_video_index", values[i])
			} else if value.Valid {
				po.AccumulatedVideoIndex = uint64(value.Int64)
			}
		case post.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case post.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				po.ModifiedAt = value.Time
			}
		case post.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_posts", value)
			} else if value.Valid {
				po.category_posts = new(int)
				*po.category_posts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategory queries the "category" edge of the Post entity.
func (po *Post) QueryCategory() *CategoryQuery {
	return (&PostClient{config: po.config}).QueryCategory(po)
}

// QueryThumbnail queries the "thumbnail" edge of the Post entity.
func (po *Post) QueryThumbnail() *PostThumbnailQuery {
	return (&PostClient{config: po.config}).QueryThumbnail(po)
}

// QueryImages queries the "images" edge of the Post entity.
func (po *Post) QueryImages() *PostImageQuery {
	return (&PostClient{config: po.config}).QueryImages(po)
}

// QueryVideos queries the "videos" edge of the Post entity.
func (po *Post) QueryVideos() *PostVideoQuery {
	return (&PostClient{config: po.config}).QueryVideos(po)
}

// Update returns a builder for updating this Post.
// Note that you need to call Post.Unwrap() before calling this method if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Post entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(po.UUID)
	builder.WriteString(", slug=")
	builder.WriteString(po.Slug)
	builder.WriteString(", access_level=")
	builder.WriteString(fmt.Sprintf("%v", po.AccessLevel))
	builder.WriteString(", title=")
	builder.WriteString(po.Title)
	builder.WriteString(", content=")
	builder.WriteString(po.Content)
	builder.WriteString(", html_content=")
	builder.WriteString(po.HTMLContent)
	builder.WriteString(", preview_content=")
	builder.WriteString(po.PreviewContent)
	builder.WriteString(", accumulated_image_index=")
	builder.WriteString(fmt.Sprintf("%v", po.AccumulatedImageIndex))
	builder.WriteString(", accumulated_video_index=")
	builder.WriteString(fmt.Sprintf("%v", po.AccumulatedVideoIndex))
	builder.WriteString(", created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", modified_at=")
	builder.WriteString(po.ModifiedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
