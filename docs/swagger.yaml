basePath: /v1
definitions:
  model.Category:
    properties:
      created-at:
        example: 2021-08-18T00:00:00Z00:00
        type: string
      description:
        example: web-related things
        type: string
      modified-at:
        example: 2021-08-18T00:00:00Z00:00
        type: string
      name:
        example: web
        type: string
    required:
    - created-at
    - modified-at
    - name
    type: object
  model.CategoryParam:
    properties:
      description:
        example: web-related things
        type: string
      name:
        example: web
        type: string
    required:
    - name
    type: object
  model.HTTPError400:
    properties:
      message:
        example: 400 - Bad request
        type: string
    required:
    - message
    type: object
  model.HTTPError401:
    properties:
      message:
        example: 401 - Unauthorized
        type: string
    required:
    - message
    type: object
  model.HTTPError404:
    properties:
      message:
        example: 404 - Not found
        type: string
    required:
    - message
    type: object
  model.HTTPError409:
    properties:
      message:
        example: 409 - Conflict
        type: string
    required:
    - message
    type: object
  model.HTTPError500:
    properties:
      message:
        example: 500 - Internal Server Error
        type: string
    required:
    - message
    type: object
  model.RobotAccess:
    properties:
      created-at:
        example: 2021-08-18T00:00:00Z00:00
        type: string
      issued-for:
        example: issuer
        type: string
      last-access-at:
        example: 2021-08-18T00:00:00Z00:00
        type: string
      memo:
        example: for AWS Lambda
        type: string
      modified-at:
        example: 2021-08-18T00:00:00Z00:00
        type: string
    required:
    - created-at
    - issued-for
    type: object
  model.RobotAccessParam:
    properties:
      slug:
        example: for AWS Lambda
        type: string
      ttl:
        description: Time-to-live in seconds
        example: 86400
        type: integer
    type: object
  model.RobotAccessTokenOnly:
    properties:
      token:
        example: 175d2572edf5e47826021b8e4ed5ea0497bd58e45d2c69b79517ee53b10ebcd35ed035b96eee4fffa595e2777da45d27c5f4692891572adb29c3a904de38f457a1c89a4b9cf97c4365368207916388ab78f598f4c9cde71df54c613cc4eca23e48acc6e719291c0c3311354e0c009465382fb457244a64814891eda82d211626
        type: string
    required:
    - token
    type: object
  model.UnsavedPost:
    properties:
      access-level:
        example: public
        type: string
      category:
        example: web
        type: string
      content:
        example: '# My first post'
        type: string
      created-at:
        example: 2021-08-18 00:00:00Z
        type: string
      images:
        items:
          $ref: '#/definitions/model.UnsavedPostImage'
        type: array
      modified-at:
        example: 2021-08-18 00:00:00Z
        type: string
      slug:
        example: my-first-post
        type: string
      thumbnail:
        $ref: '#/definitions/model.UnsavedPostThumbnail'
      title:
        example: My first post
        type: string
      uuid:
        example: fd00000aa8660b5b010006acdc0100000101000100010000fd00000aa8660b5b
        type: string
    required:
    - created-at
    - modified-at
    - uuid
    type: object
  model.UnsavedPostImage:
    properties:
      created-at:
        example: 2021-08-18 00:00:00Z
        type: string
      hash:
        example: LEHV6nWB2yk8pyo0adR*.7kCMdnj
        type: string
      height:
        example: 128
        type: integer
      title:
        example: My image
        type: string
      url:
        example: https://image.example.com/example-image
        type: string
      uuid:
        example: fd00000aa8660b5b010006acdc0100000101000100010000fd00000aa8660b5b
        type: string
      validity:
        example: pending
        type: string
      width:
        example: 256
        type: integer
    required:
    - created-at
    - uuid
    - validity
    type: object
  model.UnsavedPostImageParam:
    properties:
      hash:
        example: LEHV6nWB2yk8pyo0adR*.7kCMdnj
        type: string
      height:
        example: 128
        type: integer
      title:
        example: My image
        type: string
      url:
        example: https://image.example.com/example-image
        type: string
      validity:
        example: valid
        type: string
      width:
        example: 256
        type: integer
    required:
    - validity
    type: object
  model.UnsavedPostParam:
    properties:
      access-level:
        example: public
        type: string
      category:
        example: web
        type: string
      content:
        example: '# My first post'
        type: string
      slug:
        example: my-first-post
        type: string
      title:
        example: My first post
        type: string
    type: object
  model.UnsavedPostThumbnail:
    properties:
      created-at:
        example: 2021-08-18 00:00:00Z
        type: string
      hash:
        example: LEHV6nWB2yk8pyo0adR*.7kCMdnj
        type: string
      height:
        example: 128
        type: integer
      url:
        example: https://image.example.com/example-image
        type: string
      validity:
        example: pending
        type: string
      width:
        example: 256
        type: integer
    required:
    - created-at
    - validity
    type: object
  model.UnsavedPostThumbnailParam:
    properties:
      hash:
        example: LEHV6nWB2yk8pyo0adR*.7kCMdnj
        type: string
      height:
        example: 128
        type: integer
      url:
        example: https://image.example.com/example-image
        type: string
      validity:
        example: valid
        type: string
      width:
        example: 256
        type: integer
    required:
    - validity
    type: object
  model.UnsavedPostUUIDOnly:
    properties:
      uuid:
        example: fd00000aa8660b5b010006acdc0100000101000100010000fd00000aa8660b5b
        type: string
    required:
    - uuid
    type: object
  model.UnsavedPostWithoutImage:
    properties:
      access-level:
        example: public
        type: string
      category:
        example: web
        type: string
      created-at:
        example: 2021-08-18 00:00:00Z
        type: string
      modified-at:
        example: 2021-08-18 00:00:00Z
        type: string
      slug:
        example: my-first-post
        type: string
      thumbnail:
        $ref: '#/definitions/model.UnsavedPostThumbnail'
      title:
        example: My first post
        type: string
      uuid:
        example: fd00000aa8660b5b010006acdc0100000101000100010000fd00000aa8660b5b
        type: string
    required:
    - created-at
    - modified-at
    - uuid
    type: object
info:
  contact:
    email: led789zxpp@naver.com
    name: Author
    url: https://github.com/AcrylicShrimp
  description: A markdown-based lightweight blog service.
  license:
    name: MIT
  title: devlog
  version: 0.0.1
paths:
  /admin/categories:
    get:
      description: |-
        Lists all categories.
        The categories are sorted by the field 'name' in ascending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Category'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: List categories
      tags:
      - admin category management
    post:
      consumes:
      - application/json
      description: |-
        Creates a new category.
        The field 'name' must be unique across all categories.
      parameters:
      - description: The category to be created
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/model.CategoryParam'
      produces:
      - application/json
      responses:
        "201":
          description: 'NoContent: when the category has been removed successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "409":
          description: 'Conflict: when the name is not unique(already taken)'
          schema:
            $ref: '#/definitions/model.HTTPError409'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Create category
      tags:
      - admin category management
  /admin/categories/{name}:
    delete:
      description: Removes the given category.
      parameters:
      - description: A category name to be removed
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: 'NoContent: when the category has been removed successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Remove category
      tags:
      - admin category management
  /admin/robot-accesses:
    get:
      description: |-
        Lists all robot accesses.
        The robot accesses are sorted by the field 'last-access-at' in descending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RobotAccess'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: List robot accesses
      tags:
      - admin robot access management
    post:
      consumes:
      - application/json
      description: Creates a robot access.
      parameters:
      - description: The robot access to be created
        in: body
        name: robot-access
        required: true
        schema:
          $ref: '#/definitions/model.RobotAccessParam'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RobotAccessTokenOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Create robot access
      tags:
      - admin robot access management
  /admin/robot-accesses/{token}:
    delete:
      description: Removes the given robot access.
      parameters:
      - description: A robot access token to be removed
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: 'NoContent: when the robot access has been removed successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Remove robot access
      tags:
      - admin robot access management
  /admin/unsaved-posts:
    get:
      description: |-
        Lists all unsaved posts without its images.
        The unsaved posts are sorted by the field 'created-at' in ascending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UnsavedPostWithoutImage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: List unsaved posts
      tags:
      - admin post management
    post:
      description: |-
        Creates a new unsaved post.
        UUIDs are guaranteed to be unique across all unsaved posts.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UnsavedPostUUIDOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Create unsaved post
      tags:
      - admin post management
  /admin/unsaved-posts/{uuid}:
    delete:
      description: Deletes an unsaved post by its UUID.
      parameters:
      - description: An UUID of the unsaved post to be deleted
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the unsaved post has been deleted successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Delete unsaved post
      tags:
      - admin post management
    get:
      description: |-
        Gets an unsaved post by its UUID.
        The unsaved post will contain images if any.
      parameters:
      - description: An UUID of the unsaved post to be fetched
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UnsavedPost'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Get unsaved post
      tags:
      - admin post management
    put:
      consumes:
      - application/json
      description: Updates an unsaved post by its UUID.
      parameters:
      - description: An UUID of the unsaved post to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: The unsaved post to be updated
        in: body
        name: unsaved-post
        required: true
        schema:
          $ref: '#/definitions/model.UnsavedPostParam'
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the unsaved post has been updated successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Update unsaved post
      tags:
      - admin post management
  /admin/unsaved-posts/{uuid}/images:
    get:
      description: |-
        Lists all images for the given unsaved post.
        The images are sorted by the field 'created-at' in ascending order.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UnsavedPostImage'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: List unsaved post images
      tags:
      - admin post management
    post:
      description: |-
        Creates a new image in pending state for the unsaved post.
        A subsequent request must be sent to fill its state and fields.
      parameters:
      - description: An UUID of the unsaved post to be created
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: 'NoContent: when the image of the unsaved post has been created
            successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Create unsaved post image
      tags:
      - admin post management
  /admin/unsaved-posts/{uuid}/images/{image}:
    delete:
      description: Deletes the image for the given unsaved post.
      parameters:
      - description: An UUID of the unsaved post to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: An UUID of the image to be fetched
        in: path
        name: image
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the image of the unsaved post has been deleted
            successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Delete unsaved post image
      tags:
      - admin post management
    get:
      description: Gets the image of the unsaved post.
      parameters:
      - description: An UUID of the unsaved post to be fetched
        in: path
        name: uuid
        required: true
        type: string
      - description: An UUID of the image to be fetched
        in: path
        name: image
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UnsavedPostImage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Get unsaved post image
      tags:
      - admin post management
    put:
      consumes:
      - application/json
      description: |-
        Updates the image for the given unsaved post.
        The image can be either valid or invalid. The fields are required if it is valid. Ignored otherwise.
      parameters:
      - description: An UUID of the unsaved post to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: An UUID of the image to be fetched
        in: path
        name: image
        required: true
        type: string
      - description: The image of the unsaved post to be updated
        in: body
        name: fields
        required: true
        schema:
          $ref: '#/definitions/model.UnsavedPostImageParam'
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the image of the unsaved post has been updated
            successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Update unsaved post image
      tags:
      - admin post management
  /admin/unsaved-posts/{uuid}/thumbnail:
    delete:
      description: Deletes the thumbnail for the given unsaved post.
      parameters:
      - description: An UUID of the unsaved post to be deleted
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the thumbnail of the unsaved post has been
            deleted successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Delete unsaved post thumbnail
      tags:
      - admin post management
    get:
      description: Gets the thumbnail of the unsaved post.
      parameters:
      - description: An UUID of the unsaved post to be fetched
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UnsavedPostThumbnail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Get unsaved post thumbnail
      tags:
      - admin post management
    post:
      description: |-
        Creates a new thumbnail in pending state for the unsaved post.
        A subsequent request must be sent to fill its state and fields.
      parameters:
      - description: An UUID of the unsaved post to be created
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: 'NoContent: when the thumbnail of the unsaved post has been
            created successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.HTTPError409'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Create unsaved post thumbnail
      tags:
      - admin post management
    put:
      consumes:
      - application/json
      description: |-
        Updates the thumbnail for the given unsaved post.
        The thumbnail can be either valid or invalid. The fields are required if it is valid. Ignored otherwise.
      parameters:
      - description: An UUID of the unsaved post to be updated
        in: path
        name: uuid
        required: true
        type: string
      - description: The thumbnail of the unsaved post to be updated
        in: body
        name: fields
        required: true
        schema:
          $ref: '#/definitions/model.UnsavedPostThumbnailParam'
      produces:
      - application/json
      responses:
        "200":
          description: 'NoContent: when the thumbnail of the unsaved post has been
            updated successfully'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.HTTPError404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.HTTPError500'
      summary: Update unsaved post thumbnail
      tags:
      - admin post management
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Api-Token
    type: apiKey
swagger: "2.0"
